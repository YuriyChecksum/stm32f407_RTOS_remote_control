
stm32f407_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08008290  08008290  00009290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f0  080083f0  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  080083f0  080083f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f8  080083f8  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f8  080083f8  000093f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083fc  080083fc  000093fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008400  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          00005708  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20005768  20005768  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fcc4  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000428c  00000000  00000000  00029d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001520  00000000  00000000  0002fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000473f  00000000  00000000  00031000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fee4  00000000  00000000  0003573f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ed4  00000000  00000000  00055623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c4f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007684  00000000  00000000  0013c53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00143bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008278 	.word	0x08008278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008278 	.word	0x08008278

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fe8e 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f880 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fb08 	bl	8000ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 fab0 	bl	8000a34 <MX_DMA_Init>
  MX_ADC1_Init();
 80004d4:	f000 f8e4 	bl	80006a0 <MX_ADC1_Init>
  MX_CRC_Init();
 80004d8:	f000 f95e 	bl	8000798 <MX_CRC_Init>
  MX_DAC_Init();
 80004dc:	f000 f970 	bl	80007c0 <MX_DAC_Init>
  MX_I2C1_Init();
 80004e0:	f000 f998 	bl	8000814 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004e4:	f000 f9c4 	bl	8000870 <MX_I2C2_Init>
  MX_RNG_Init();
 80004e8:	f000 f9f0 	bl	80008cc <MX_RNG_Init>
  MX_TIM4_Init();
 80004ec:	f000 fa02 	bl	80008f4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 fa76 	bl	80009e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f004 fbf2 	bl	8004cdc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80004f8:	4820      	ldr	r0, [pc, #128]	@ (800057c <main+0xbc>)
 80004fa:	f004 fdb6 	bl	800506a <osMutexNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a1f      	ldr	r2, [pc, #124]	@ (8000580 <main+0xc0>)
 8000502:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000504:	4a1f      	ldr	r2, [pc, #124]	@ (8000584 <main+0xc4>)
 8000506:	2100      	movs	r1, #0
 8000508:	2001      	movs	r0, #1
 800050a:	f004 fe34 	bl	8005176 <osSemaphoreNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a1d      	ldr	r2, [pc, #116]	@ (8000588 <main+0xc8>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8000514:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <main+0xcc>)
 8000516:	2102      	movs	r1, #2
 8000518:	2002      	movs	r0, #2
 800051a:	f004 fe2c 	bl	8005176 <osSemaphoreNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a1b      	ldr	r2, [pc, #108]	@ (8000590 <main+0xd0>)
 8000522:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000524:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <main+0xd4>)
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	481b      	ldr	r0, [pc, #108]	@ (8000598 <main+0xd8>)
 800052c:	f004 fce2 	bl	8004ef4 <osTimerNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a1a      	ldr	r2, [pc, #104]	@ (800059c <main+0xdc>)
 8000534:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of keyReadTask */
  keyReadTaskHandle = osThreadNew(StartTaskKeyRead, NULL, &keyReadTask_attributes);
 8000536:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <main+0xe0>)
 8000538:	2100      	movs	r1, #0
 800053a:	481a      	ldr	r0, [pc, #104]	@ (80005a4 <main+0xe4>)
 800053c:	f004 fc18 	bl	8004d70 <osThreadNew>
 8000540:	4603      	mov	r3, r0
 8000542:	4a19      	ldr	r2, [pc, #100]	@ (80005a8 <main+0xe8>)
 8000544:	6013      	str	r3, [r2, #0]

  /* creation of uartReadTask */
  uartReadTaskHandle = osThreadNew(StartTaskUARTRead, NULL, &uartReadTask_attributes);
 8000546:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <main+0xec>)
 8000548:	2100      	movs	r1, #0
 800054a:	4819      	ldr	r0, [pc, #100]	@ (80005b0 <main+0xf0>)
 800054c:	f004 fc10 	bl	8004d70 <osThreadNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a18      	ldr	r2, [pc, #96]	@ (80005b4 <main+0xf4>)
 8000554:	6013      	str	r3, [r2, #0]

  /* creation of myTaskADC1 */
  myTaskADC1Handle = osThreadNew(StartTaskADC, NULL, &myTaskADC1_attributes);
 8000556:	4a18      	ldr	r2, [pc, #96]	@ (80005b8 <main+0xf8>)
 8000558:	2100      	movs	r1, #0
 800055a:	4818      	ldr	r0, [pc, #96]	@ (80005bc <main+0xfc>)
 800055c:	f004 fc08 	bl	8004d70 <osThreadNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a17      	ldr	r2, [pc, #92]	@ (80005c0 <main+0x100>)
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 8000566:	4817      	ldr	r0, [pc, #92]	@ (80005c4 <main+0x104>)
 8000568:	f004 fd40 	bl	8004fec <osEventFlagsNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a16      	ldr	r2, [pc, #88]	@ (80005c8 <main+0x108>)
 8000570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000572:	f004 fbd7 	bl	8004d24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	bf00      	nop
 8000578:	e7fd      	b.n	8000576 <main+0xb6>
 800057a:	bf00      	nop
 800057c:	08008390 	.word	0x08008390
 8000580:	20000b1c 	.word	0x20000b1c
 8000584:	080083a0 	.word	0x080083a0
 8000588:	20000b70 	.word	0x20000b70
 800058c:	080083b0 	.word	0x080083b0
 8000590:	20000bc4 	.word	0x20000bc4
 8000594:	08008380 	.word	0x08008380
 8000598:	08000c7d 	.word	0x08000c7d
 800059c:	20000aec 	.word	0x20000aec
 80005a0:	08008314 	.word	0x08008314
 80005a4:	08000c4d 	.word	0x08000c4d
 80005a8:	200002e8 	.word	0x200002e8
 80005ac:	08008338 	.word	0x08008338
 80005b0:	08000c5d 	.word	0x08000c5d
 80005b4:	20000594 	.word	0x20000594
 80005b8:	0800835c 	.word	0x0800835c
 80005bc:	08000c6d 	.word	0x08000c6d
 80005c0:	20000840 	.word	0x20000840
 80005c4:	080083c0 	.word	0x080083c0
 80005c8:	20000c18 	.word	0x20000c18

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fd64 	bl	80080a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xd0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	@ 0xa8
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f9f1 	bl	8002a38 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fb18 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fc52 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068a:	f000 fb01 	bl	8000c90 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	@ 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b2:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006b4:	4a37      	ldr	r2, [pc, #220]	@ (8000794 <MX_ADC1_Init+0xf4>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b35      	ldr	r3, [pc, #212]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c6:	4b32      	ldr	r3, [pc, #200]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006cc:	4b30      	ldr	r3, [pc, #192]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006da:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006e4:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC1_Init+0xf0>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC1_Init+0xf0>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	4822      	ldr	r0, [pc, #136]	@ (8000790 <MX_ADC1_Init+0xf0>)
 8000706:	f000 fddf 	bl	80012c8 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000710:	f000 fabe 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800071c:	2306      	movs	r3, #6
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	481a      	ldr	r0, [pc, #104]	@ (8000790 <MX_ADC1_Init+0xf0>)
 8000726:	f000 ff41 	bl	80015ac <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000730:	f000 faae 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000734:	2301      	movs	r3, #1
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <MX_ADC1_Init+0xf0>)
 8000742:	f000 ff33 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800074c:	f000 faa0 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000750:	2310      	movs	r3, #16
 8000752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000754:	2303      	movs	r3, #3
 8000756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_ADC1_Init+0xf0>)
 800075e:	f000 ff25 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000768:	f000 fa92 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800076c:	2311      	movs	r3, #17
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_ADC1_Init+0xf0>)
 800077a:	f000 ff17 	bl	80015ac <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000784:	f000 fa84 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000007c 	.word	0x2000007c
 8000794:	40012000 	.word	0x40012000

08000798 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_CRC_Init+0x20>)
 800079e:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <MX_CRC_Init+0x24>)
 80007a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_CRC_Init+0x20>)
 80007a4:	f001 fa3b 	bl	8001c1e <HAL_CRC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ae:	f000 fa6f 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000124 	.word	0x20000124
 80007bc:	40023000 	.word	0x40023000

080007c0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_DAC_Init+0x4c>)
 80007d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000810 <MX_DAC_Init+0x50>)
 80007d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d4:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_DAC_Init+0x4c>)
 80007d6:	f001 fa3e 	bl	8001c56 <HAL_DAC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e0:	f000 fa56 	bl	8000c90 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_DAC_Init+0x4c>)
 80007f4:	f001 fa51 	bl	8001c9a <HAL_DAC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007fe:	f000 fa47 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000012c 	.word	0x2000012c
 8000810:	40007400 	.word	0x40007400

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <MX_I2C1_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_I2C1_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_I2C1_Init+0x50>)
 8000852:	f001 ffad 	bl	80027b0 <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 fa18 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000140 	.word	0x20000140
 8000868:	40005400 	.word	0x40005400
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C2_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <MX_I2C2_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_I2C2_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_I2C2_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C2_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_I2C2_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_I2C2_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_I2C2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_I2C2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <MX_I2C2_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_I2C2_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_I2C2_Init+0x50>)
 80008ae:	f001 ff7f 	bl	80027b0 <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f9ea 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000194 	.word	0x20000194
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00061a80 	.word	0x00061a80

080008cc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_RNG_Init+0x20>)
 80008d2:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <MX_RNG_Init+0x24>)
 80008d4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_RNG_Init+0x20>)
 80008d8:	f002 fd46 	bl	8003368 <HAL_RNG_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008e2:	f000 f9d5 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001e8 	.word	0x200001e8
 80008f0:	50060800 	.word	0x50060800

080008f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	@ 0x38
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 8000926:	4a2d      	ldr	r2, [pc, #180]	@ (80009dc <MX_TIM4_Init+0xe8>)
 8000928:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 800092a:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 800092c:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000930:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 800093a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800093e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 8000942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000946:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800094e:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 8000950:	f002 fd34 	bl	80033bc <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800095a:	f000 f999 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000964:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000968:	4619      	mov	r1, r3
 800096a:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 800096c:	f002 fe2a 	bl	80035c4 <HAL_TIM_ConfigClockSource>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000976:	f000 f98b 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800097a:	4817      	ldr	r0, [pc, #92]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 800097c:	f002 fd6d 	bl	800345a <HAL_TIM_OC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000986:	f000 f983 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4619      	mov	r1, r3
 8000998:	480f      	ldr	r0, [pc, #60]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 800099a:	f003 f9d1 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80009a4:	f000 f974 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009a8:	2330      	movs	r3, #48	@ 0x30
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	220c      	movs	r2, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <MX_TIM4_Init+0xe4>)
 80009c0:	f002 fda4 	bl	800350c <HAL_TIM_OC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80009ca:	f000 f961 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3738      	adds	r7, #56	@ 0x38
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001f8 	.word	0x200001f8
 80009dc:	40000800 	.word	0x40000800

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 80009e6:	4a11      	ldr	r2, [pc, #68]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 80009ec:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <MX_USART2_UART_Init+0x50>)
 80009ee:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 8000a04:	220c      	movs	r2, #12
 8000a06:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART2_UART_Init+0x48>)
 8000a16:	f003 fa0f 	bl	8003e38 <HAL_UART_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000a20:	f000 f936 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000240 	.word	0x20000240
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	000f4240 	.word	0x000f4240

08000a34 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <MX_DMA_Init+0xa0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a24      	ldr	r2, [pc, #144]	@ (8000ad4 <MX_DMA_Init+0xa0>)
 8000a44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MX_DMA_Init+0xa0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a58:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <MX_DMA_Init+0xa8>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a64:	2280      	movs	r2, #128	@ 0x80
 8000a66:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a76:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a7e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000aac:	480a      	ldr	r0, [pc, #40]	@ (8000ad8 <MX_DMA_Init+0xa4>)
 8000aae:	f001 f94d 	bl	8001d4c <HAL_DMA_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000ab8:	f000 f8ea 	bl	8000c90 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	2038      	movs	r0, #56	@ 0x38
 8000ac2:	f001 f876 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ac6:	2038      	movs	r0, #56	@ 0x38
 8000ac8:	f001 f88f 	bl	8001bea <HAL_NVIC_EnableIRQ>

}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	20000288 	.word	0x20000288
 8000adc:	40026428 	.word	0x40026428

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b51      	ldr	r3, [pc, #324]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a50      	ldr	r2, [pc, #320]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b00:	f043 0310 	orr.w	r3, r3, #16
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b4e      	ldr	r3, [pc, #312]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0310 	and.w	r3, r3, #16
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b4a      	ldr	r3, [pc, #296]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a49      	ldr	r2, [pc, #292]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b47      	ldr	r3, [pc, #284]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b43      	ldr	r3, [pc, #268]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a42      	ldr	r2, [pc, #264]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a3b      	ldr	r2, [pc, #236]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b39      	ldr	r3, [pc, #228]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a34      	ldr	r2, [pc, #208]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <MX_GPIO_Init+0x160>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_RES_Pin|LCD_RS_Pin|LCD_CLK_Pin
 8000b82:	2200      	movs	r2, #0
 8000b84:	f64f 0101 	movw	r1, #63489	@ 0xf801
 8000b88:	482e      	ldr	r0, [pc, #184]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000b8a:	f001 fdf7 	bl	800277c <HAL_GPIO_WritePin>
                          |LCD_DAT_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000b8e:	237c      	movs	r3, #124	@ 0x7c
 8000b90:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4828      	ldr	r0, [pc, #160]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000ba2:	f001 fc4f 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ba6:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4821      	ldr	r0, [pc, #132]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000bbe:	f001 fc41 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RS_Pin;
 8000bc2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481a      	ldr	r0, [pc, #104]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000bdc:	f001 fc32 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LED1_Pin;
 8000be0:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4812      	ldr	r0, [pc, #72]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000bfa:	f001 fc23 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CLK_Pin LCD_DAT_Pin */
  GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DAT_Pin;
 8000bfe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <MX_GPIO_Init+0x164>)
 8000c18:	f001 fc14 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_U_Pin BT_SET_Pin BT_D_Pin BT_R_Pin
                           BT_M_Pin BT_L_Pin */
  GPIO_InitStruct.Pin = BT_U_Pin|BT_SET_Pin|BT_D_Pin|BT_R_Pin
 8000c1c:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000c20:	617b      	str	r3, [r7, #20]
                          |BT_M_Pin|BT_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_GPIO_Init+0x168>)
 8000c32:	f001 fc07 	bl	8002444 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40020c00 	.word	0x40020c00

08000c4c <StartTaskKeyRead>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskKeyRead */
void StartTaskKeyRead(void *argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f004 f91d 	bl	8004e94 <osDelay>
 8000c5a:	e7fb      	b.n	8000c54 <StartTaskKeyRead+0x8>

08000c5c <StartTaskUARTRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUARTRead */
void StartTaskUARTRead(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUARTRead */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f004 f915 	bl	8004e94 <osDelay>
 8000c6a:	e7fb      	b.n	8000c64 <StartTaskUARTRead+0x8>

08000c6c <StartTaskADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskADC */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f004 f90d 	bl	8004e94 <osDelay>
 8000c7a:	e7fb      	b.n	8000c74 <StartTaskADC+0x8>

08000c7c <Callback01>:
  /* USER CODE END StartTaskADC */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	210f      	movs	r1, #15
 8000cde:	f06f 0001 	mvn.w	r0, #1
 8000ce2:	f000 ff66 	bl	8001bb2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a33      	ldr	r2, [pc, #204]	@ (8000de0 <HAL_ADC_MspInit+0xec>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d15f      	bne.n	8000dd6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <HAL_ADC_MspInit+0xf0>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a31      	ldr	r2, [pc, #196]	@ (8000de4 <HAL_ADC_MspInit+0xf0>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <HAL_ADC_MspInit+0xf0>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <HAL_ADC_MspInit+0xf0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000de4 <HAL_ADC_MspInit+0xf0>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <HAL_ADC_MspInit+0xf0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d52:	2303      	movs	r3, #3
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4821      	ldr	r0, [pc, #132]	@ (8000de8 <HAL_ADC_MspInit+0xf4>)
 8000d62:	f001 fb6f 	bl	8002444 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d68:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <HAL_ADC_MspInit+0xfc>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000daa:	4810      	ldr	r0, [pc, #64]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000dac:	f000 ffce 	bl	8001d4c <HAL_DMA_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000db6:	f7ff ff6b 	bl	8000c90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000dbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_ADC_MspInit+0xf8>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f000 fef1 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f000 ff0a 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	200000c4 	.word	0x200000c4
 8000df0:	40026410 	.word	0x40026410

08000df4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <HAL_CRC_MspInit+0x3c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10d      	bne.n	8000e22 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_CRC_MspInit+0x40>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <HAL_CRC_MspInit+0x40>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <HAL_CRC_MspInit+0x40>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023000 	.word	0x40023000
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <HAL_DAC_MspInit+0x7c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d127      	bne.n	8000eaa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a15      	ldr	r2, [pc, #84]	@ (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <HAL_DAC_MspInit+0x80>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e92:	2310      	movs	r3, #16
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <HAL_DAC_MspInit+0x84>)
 8000ea6:	f001 facd 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40007400 	.word	0x40007400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	@ 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a32      	ldr	r2, [pc, #200]	@ (8000fa8 <HAL_I2C_MspInit+0xe8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12c      	bne.n	8000f3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a30      	ldr	r2, [pc, #192]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efe:	23c0      	movs	r3, #192	@ 0xc0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <HAL_I2C_MspInit+0xf0>)
 8000f1a:	f001 fa93 	bl	8002444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f3a:	e031      	b.n	8000fa0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <HAL_I2C_MspInit+0xf4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f74:	2304      	movs	r3, #4
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <HAL_I2C_MspInit+0xf0>)
 8000f80:	f001 fa60 	bl	8002444 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_I2C_MspInit+0xec>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	@ 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40005800 	.word	0x40005800

08000fb8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <HAL_RNG_MspInit+0x3c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10d      	bne.n	8000fe6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_RNG_MspInit+0x40>)
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd2:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <HAL_RNG_MspInit+0x40>)
 8000fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd8:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <HAL_RNG_MspInit+0x40>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	50060800 	.word	0x50060800
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_TIM_Base_MspInit+0x3c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10d      	bne.n	800102a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_TIM_Base_MspInit+0x40>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a09      	ldr	r2, [pc, #36]	@ (800103c <HAL_TIM_Base_MspInit+0x40>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_TIM_Base_MspInit+0x40>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40000800 	.word	0x40000800
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <HAL_UART_MspInit+0x94>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d133      	bne.n	80010ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_UART_MspInit+0x98>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <HAL_UART_MspInit+0x98>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_UART_MspInit+0x98>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_UART_MspInit+0x98>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <HAL_UART_MspInit+0x98>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_UART_MspInit+0x98>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800109a:	230c      	movs	r3, #12
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <HAL_UART_MspInit+0x9c>)
 80010b6:	f001 f9c5 	bl	8002444 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2026      	movs	r0, #38	@ 0x26
 80010c0:	f000 fd77 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c4:	2026      	movs	r0, #38	@ 0x26
 80010c6:	f000 fd90 	bl	8001bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111a:	f000 f8b5 	bl	8001288 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800111e:	f005 fe85 	bl	8006e2c <xTaskGetSchedulerState>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d001      	beq.n	800112c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001128:	f006 fd3e 	bl	8007ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <ADC_IRQHandler+0x10>)
 8001136:	f000 f90a 	bl	800134e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000007c 	.word	0x2000007c

08001144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <USART2_IRQHandler+0x10>)
 800114a:	f002 fec5 	bl	8003ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000240 	.word	0x20000240

08001158 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <DMA2_Stream0_IRQHandler+0x10>)
 800115e:	f000 ff35 	bl	8001fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c4 	.word	0x200000c4

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <SystemInit+0x20>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001176:	4a05      	ldr	r2, [pc, #20]	@ (800118c <SystemInit+0x20>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001194:	f7ff ffea 	bl	800116c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	@ (80011cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	@ (80011d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	@ (80011dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011be:	f006 ffd1 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff f97d 	bl	80004c0 <main>
  bx  lr    
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011d4:	08008400 	.word	0x08008400
  ldr r2, =_sbss
 80011d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011dc:	20005768 	.word	0x20005768

080011e0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <CAN1_RX0_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <HAL_Init+0x40>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_Init+0x40>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_Init+0x40>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fcc5 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fd40 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fcdd 	bl	8001c06 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 fca5 	bl	8001bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000c3c 	.word	0x20000c3c

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000c3c 	.word	0x20000c3c

080012c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e033      	b.n	8001346 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fd04 	bl	8000cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	d118      	bne.n	8001338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800130e:	f023 0302 	bic.w	r3, r3, #2
 8001312:	f043 0202 	orr.w	r2, r3, #2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa68 	bl	80017f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
 8001336:	e001      	b.n	800133c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d049      	beq.n	8001418 <HAL_ADC_IRQHandler+0xca>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d046      	beq.n	8001418 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d12b      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d127      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d119      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0220 	bic.w	r2, r2, #32
 80013e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f8b0 	bl	800156e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f06f 0212 	mvn.w	r2, #18
 8001416:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001426:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d057      	beq.n	80014de <HAL_ADC_IRQHandler+0x190>
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d054      	beq.n	80014de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d139      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001460:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001472:	2b00      	cmp	r3, #0
 8001474:	d12b      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001480:	2b00      	cmp	r3, #0
 8001482:	d124      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d11d      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001496:	2b00      	cmp	r3, #0
 8001498:	d119      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fa8a 	bl	80019e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f06f 020c 	mvn.w	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d017      	beq.n	8001524 <HAL_ADC_IRQHandler+0x1d6>
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d014      	beq.n	8001524 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10d      	bne.n	8001524 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f834 	bl	8001582 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0201 	mvn.w	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001532:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <HAL_ADC_IRQHandler+0x218>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d012      	beq.n	8001566 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	f043 0202 	orr.w	r2, r3, #2
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f06f 0220 	mvn.w	r2, #32
 8001554:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f81d 	bl	8001596 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f06f 0220 	mvn.w	r2, #32
 8001564:	601a      	str	r2, [r3, #0]
  }
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e105      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x228>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d925      	bls.n	8001624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	3b1e      	subs	r3, #30
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	3b1e      	subs	r3, #30
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	e022      	b.n	800166a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	2207      	movs	r2, #7
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4403      	add	r3, r0
 8001660:	409a      	lsls	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d824      	bhi.n	80016bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b05      	subs	r3, #5
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ba:	e04c      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d824      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b23      	subs	r3, #35	@ 0x23
 80016d6:	221f      	movs	r2, #31
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	400a      	ands	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	@ 0x23
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	631a      	str	r2, [r3, #48]	@ 0x30
 800170c:	e023      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	@ 0x41
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	@ 0x41
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <HAL_ADC_ConfigChannel+0x234>)
 8001758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d109      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d105      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d123      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	d003      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x1e6>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b11      	cmp	r3, #17
 8001790:	d11b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d111      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <HAL_ADC_ConfigChannel+0x23c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_ADC_ConfigChannel+0x240>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9a      	lsrs	r2, r3, #18
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	40012000 	.word	0x40012000
 80017e8:	20000000 	.word	0x20000000
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f8:	4b79      	ldr	r3, [pc, #484]	@ (80019e0 <ADC_Init+0x1f0>)
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	021a      	lsls	r2, r3, #8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800186a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6899      	ldr	r1, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	4a58      	ldr	r2, [pc, #352]	@ (80019e4 <ADC_Init+0x1f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d022      	beq.n	80018ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e00f      	b.n	80018ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0202 	bic.w	r2, r2, #2
 80018fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
 8001908:	005a      	lsls	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01b      	beq.n	8001954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800192a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800193a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	3b01      	subs	r3, #1
 8001948:	035a      	lsls	r2, r3, #13
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	e007      	b.n	8001964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001962:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	3b01      	subs	r3, #1
 8001980:	051a      	lsls	r2, r3, #20
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019a6:	025a      	lsls	r2, r3, #9
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	029a      	lsls	r2, r3, #10
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	0f000001 	.word	0x0f000001

080019e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4907      	ldr	r1, [pc, #28]	@ (8001a98 <__NVIC_EnableIRQ+0x38>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	@ (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	@ 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff29 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff3e 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff31 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffa2 	bl	8001b58 <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e00e      	b.n	8001c4e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	795b      	ldrb	r3, [r3, #5]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff f8d7 	bl	8000df4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e014      	b.n	8001c92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff f8dd 	bl	8000e38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2202      	movs	r2, #2
 8001c82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b089      	sub	sp, #36	@ 0x24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_DAC_ConfigChannel+0x1c>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e042      	b.n	8001d40 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	795b      	ldrb	r3, [r3, #5]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DAC_ConfigChannel+0x2c>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e03c      	b.n	8001d40 <HAL_DAC_ConfigChannel+0xa6>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	22c0      	movs	r2, #192	@ 0xc0
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3724      	adds	r7, #36	@ 0x24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff faaa 	bl	80012b0 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e099      	b.n	8001e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e00f      	b.n	8001daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fa91 	bl	80012b0 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d908      	bls.n	8001daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e078      	b.n	8001e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e8      	bne.n	8001d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_DMA_Init+0x158>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d117      	bne.n	8001e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fa7b 	bl	800234c <DMA_CheckFifoParam>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fa32 	bl	80022e0 <DMA_CalcBaseAndBitshift>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	223f      	movs	r2, #63	@ 0x3f
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f010803f 	.word	0xf010803f

08001ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	f7ff f9fb 	bl	80012b0 <HAL_GetTick>
 8001eba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e052      	b.n	8001f80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0216 	bic.w	r2, r2, #22
 8001ee8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ef8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_DMA_Abort+0x62>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0208 	bic.w	r2, r2, #8
 8001f18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2a:	e013      	b.n	8001f54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2c:	f7ff f9c0 	bl	80012b0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d90c      	bls.n	8001f54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e015      	b.n	8001f80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e4      	bne.n	8001f2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	223f      	movs	r2, #63	@ 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d004      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00c      	b.n	8001fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002214 <HAL_DMA_IRQHandler+0x248>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8002218 <HAL_DMA_IRQHandler+0x24c>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01a      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	2208      	movs	r2, #8
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f043 0202 	orr.w	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	2204      	movs	r2, #4
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2210      	movs	r2, #16
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d043      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03c      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2210      	movs	r2, #16
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d024      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
 80020fa:	e01f      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e016      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0208 	bic.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	2220      	movs	r2, #32
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 808f 	beq.w	800226c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8087 	beq.w	800226c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	2220      	movs	r2, #32
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b05      	cmp	r3, #5
 8002174:	d136      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0216 	bic.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x1da>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ba:	223f      	movs	r2, #63	@ 0x3f
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d07e      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
        }
        return;
 80021e2:	e079      	b.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	2b00      	cmp	r3, #0
 8002206:	d031      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e02c      	b.n	800226c <HAL_DMA_IRQHandler+0x2a0>
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000
 8002218:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d023      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e01e      	b.n	800226c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10f      	bne.n	800225c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	2b00      	cmp	r3, #0
 8002272:	d032      	beq.n	80022da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d022      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2205      	movs	r2, #5
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3301      	adds	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d307      	bcc.n	80022b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f2      	bne.n	8002298 <HAL_DMA_IRQHandler+0x2cc>
 80022b2:	e000      	b.n	80022b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e000      	b.n	80022da <HAL_DMA_IRQHandler+0x30e>
        return;
 80022d8:	bf00      	nop
    }
  }
}
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b10      	subs	r3, #16
 80022f0:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <DMA_CalcBaseAndBitshift+0x64>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fa:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <DMA_CalcBaseAndBitshift+0x68>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d909      	bls.n	8002322 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	1d1a      	adds	r2, r3, #4
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002320:	e007      	b.n	8002332 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	aaaaaaab 	.word	0xaaaaaaab
 8002348:	080083e8 	.word	0x080083e8

0800234c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11f      	bne.n	80023a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d856      	bhi.n	800241a <DMA_CheckFifoParam+0xce>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <DMA_CheckFifoParam+0x28>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002385 	.word	0x08002385
 8002378:	08002397 	.word	0x08002397
 800237c:	08002385 	.word	0x08002385
 8002380:	0800241b 	.word	0x0800241b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d046      	beq.n	800241e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002394:	e043      	b.n	800241e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800239e:	d140      	bne.n	8002422 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a4:	e03d      	b.n	8002422 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ae:	d121      	bne.n	80023f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d837      	bhi.n	8002426 <DMA_CheckFifoParam+0xda>
 80023b6:	a201      	add	r2, pc, #4	@ (adr r2, 80023bc <DMA_CheckFifoParam+0x70>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	080023cd 	.word	0x080023cd
 80023c0:	080023d3 	.word	0x080023d3
 80023c4:	080023cd 	.word	0x080023cd
 80023c8:	080023e5 	.word	0x080023e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      break;
 80023d0:	e030      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d025      	beq.n	800242a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e2:	e022      	b.n	800242a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ec:	d11f      	bne.n	800242e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f2:	e01c      	b.n	800242e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d903      	bls.n	8002402 <DMA_CheckFifoParam+0xb6>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d003      	beq.n	8002408 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002400:	e018      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
      break;
 8002406:	e015      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00e      	beq.n	8002432 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      break;
 8002418:	e00b      	b.n	8002432 <DMA_CheckFifoParam+0xe6>
      break;
 800241a:	bf00      	nop
 800241c:	e00a      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e008      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e006      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e004      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e002      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;   
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
    }
  } 
  
  return status; 
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e16b      	b.n	8002738 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 815a 	bne.w	8002732 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d005      	beq.n	8002496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	2b02      	cmp	r3, #2
 8002494:	d130      	bne.n	80024f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0201 	and.w	r2, r3, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d017      	beq.n	8002534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b4 	beq.w	8002732 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025da:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002754 <HAL_GPIO_Init+0x310>)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <HAL_GPIO_Init+0x226>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	@ (800275c <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d025      	beq.n	8002666 <HAL_GPIO_Init+0x222>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	@ (8002760 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <HAL_GPIO_Init+0x21e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	@ (8002764 <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x21a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	@ (8002768 <HAL_GPIO_Init+0x324>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x216>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	@ (800276c <HAL_GPIO_Init+0x328>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x212>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	@ (8002770 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	@ (8002774 <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x20a>
 800264a:	2307      	movs	r3, #7
 800264c:	e00e      	b.n	800266c <HAL_GPIO_Init+0x228>
 800264e:	2308      	movs	r3, #8
 8002650:	e00c      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002652:	2306      	movs	r3, #6
 8002654:	e00a      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002656:	2305      	movs	r3, #5
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265a:	2304      	movs	r3, #4
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x228>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	@ (8002754 <HAL_GPIO_Init+0x310>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_GPIO_Init+0x334>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f ae90 	bls.w	8002460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e12b      	b.n	8002a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fb72 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	@ 0x24
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002814:	f000 fd80 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8002818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a81      	ldr	r2, [pc, #516]	@ (8002a24 <HAL_I2C_Init+0x274>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d807      	bhi.n	8002834 <HAL_I2C_Init+0x84>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a80      	ldr	r2, [pc, #512]	@ (8002a28 <HAL_I2C_Init+0x278>)
 8002828:	4293      	cmp	r3, r2
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e006      	b.n	8002842 <HAL_I2C_Init+0x92>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a7d      	ldr	r2, [pc, #500]	@ (8002a2c <HAL_I2C_Init+0x27c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	bf94      	ite	ls
 800283c:	2301      	movls	r3, #1
 800283e:	2300      	movhi	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0e7      	b.n	8002a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a78      	ldr	r2, [pc, #480]	@ (8002a30 <HAL_I2C_Init+0x280>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a6a      	ldr	r2, [pc, #424]	@ (8002a24 <HAL_I2C_Init+0x274>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d802      	bhi.n	8002884 <HAL_I2C_Init+0xd4>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	e009      	b.n	8002898 <HAL_I2C_Init+0xe8>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4a69      	ldr	r2, [pc, #420]	@ (8002a34 <HAL_I2C_Init+0x284>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	3301      	adds	r3, #1
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	495c      	ldr	r1, [pc, #368]	@ (8002a24 <HAL_I2C_Init+0x274>)
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d819      	bhi.n	80028ec <HAL_I2C_Init+0x13c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e59      	subs	r1, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028cc:	400b      	ands	r3, r1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_I2C_Init+0x138>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e59      	subs	r1, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e6:	e051      	b.n	800298c <HAL_I2C_Init+0x1dc>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e04f      	b.n	800298c <HAL_I2C_Init+0x1dc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_I2C_Init+0x168>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e012      	b.n	800293e <HAL_I2C_Init+0x18e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Init+0x196>
 8002942:	2301      	movs	r3, #1
 8002944:	e022      	b.n	800298c <HAL_I2C_Init+0x1dc>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10e      	bne.n	800296c <HAL_I2C_Init+0x1bc>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e58      	subs	r0, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296a:	e00f      	b.n	800298c <HAL_I2C_Init+0x1dc>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6809      	ldr	r1, [r1, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6911      	ldr	r1, [r2, #16]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	000186a0 	.word	0x000186a0
 8002a28:	001e847f 	.word	0x001e847f
 8002a2c:	003d08ff 	.word	0x003d08ff
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	10624dd3 	.word	0x10624dd3

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e267      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a56:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b85      	ldr	r3, [pc, #532]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e242      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x74>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b70      	ldr	r3, [pc, #448]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6f      	ldr	r2, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002ad0:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a68      	ldr	r2, [pc, #416]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a65      	ldr	r2, [pc, #404]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fbde 	bl	80012b0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fbda 	bl	80012b0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e207      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fbca 	bl	80012b0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fbc6 	bl	80012b0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1f3      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b51      	ldr	r3, [pc, #324]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b44      	ldr	r3, [pc, #272]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c7      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4937      	ldr	r1, [pc, #220]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fb7f 	bl	80012b0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fb7b 	bl	80012b0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a8      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b28      	ldr	r3, [pc, #160]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4925      	ldr	r1, [pc, #148]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b24      	ldr	r3, [pc, #144]	@ (8002c7c <HAL_RCC_OscConfig+0x244>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fb5e 	bl	80012b0 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fb5a 	bl	80012b0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e187      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d036      	beq.n	8002c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fb3e 	bl	80012b0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fb3a 	bl	80012b0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e167      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x200>
 8002c56:	e01b      	b.n	8002c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_OscConfig+0x248>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fb27 	bl	80012b0 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e00e      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fb23 	bl	80012b0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d907      	bls.n	8002c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e150      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ea      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8097 	beq.w	8002dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b81      	ldr	r3, [pc, #516]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b77      	ldr	r3, [pc, #476]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b74      	ldr	r3, [pc, #464]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a73      	ldr	r2, [pc, #460]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fae3 	bl	80012b0 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7fe fadf 	bl	80012b0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e10c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <HAL_RCC_OscConfig+0x474>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ea>
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d20:	e01c      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x30c>
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0x324>
 8002d44:	4b58      	ldr	r3, [pc, #352]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a57      	ldr	r2, [pc, #348]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	4b55      	ldr	r3, [pc, #340]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a54      	ldr	r2, [pc, #336]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 0304 	bic.w	r3, r3, #4
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe faa4 	bl	80012b0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe faa0 	bl	80012b0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0cb      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	4b49      	ldr	r3, [pc, #292]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ee      	beq.n	8002d6c <HAL_RCC_OscConfig+0x334>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7fe fa8e 	bl	80012b0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7fe fa8a 	bl	80012b0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0b5      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ee      	bne.n	8002d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b39      	ldr	r3, [pc, #228]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	4a38      	ldr	r2, [pc, #224]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a1 	beq.w	8002f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d05c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d141      	bne.n	8002e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fa5e 	bl	80012b0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fa5a 	bl	80012b0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e087      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	491b      	ldr	r1, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fa33 	bl	80012b0 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fa2f 	bl	80012b0 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e05c      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x416>
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_RCC_OscConfig+0x478>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe fa1c 	bl	80012b0 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fa18 	bl	80012b0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e045      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCC_OscConfig+0x470>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x444>
 8002e9a:	e03d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e038      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d028      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d121      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cc      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b68      	ldr	r3, [pc, #416]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90c      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d044      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d119      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e067      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b37      	ldr	r3, [pc, #220]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4934      	ldr	r1, [pc, #208]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe f94a 	bl	80012b0 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe f946 	bl	80012b0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f821 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f8aa 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	080083d0 	.word	0x080083d0
 80030ec:	20000000 	.word	0x20000000
 80030f0:	20000004 	.word	0x20000004

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f8:	b094      	sub	sp, #80	@ 0x50
 80030fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003100:	2300      	movs	r3, #0
 8003102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003104:	2300      	movs	r3, #0
 8003106:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310c:	4b79      	ldr	r3, [pc, #484]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d00d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x40>
 8003118:	2b08      	cmp	r3, #8
 800311a:	f200 80e1 	bhi.w	80032e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x3a>
 8003126:	e0db      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800312a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800312c:	e0db      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312e:	4b73      	ldr	r3, [pc, #460]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003132:	e0d8      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003134:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800313c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313e:	4b6d      	ldr	r3, [pc, #436]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d063      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b6a      	ldr	r3, [pc, #424]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	2200      	movs	r2, #0
 8003152:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003154:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	633b      	str	r3, [r7, #48]	@ 0x30
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
 8003162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	0159      	lsls	r1, r3, #5
 8003174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003178:	0150      	lsls	r0, r2, #5
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4621      	mov	r1, r4
 8003180:	1a51      	subs	r1, r2, r1
 8003182:	6139      	str	r1, [r7, #16]
 8003184:	4629      	mov	r1, r5
 8003186:	eb63 0301 	sbc.w	r3, r3, r1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003198:	4659      	mov	r1, fp
 800319a:	018b      	lsls	r3, r1, #6
 800319c:	4651      	mov	r1, sl
 800319e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031a2:	4651      	mov	r1, sl
 80031a4:	018a      	lsls	r2, r1, #6
 80031a6:	4651      	mov	r1, sl
 80031a8:	ebb2 0801 	subs.w	r8, r2, r1
 80031ac:	4659      	mov	r1, fp
 80031ae:	eb63 0901 	sbc.w	r9, r3, r1
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c6:	4690      	mov	r8, r2
 80031c8:	4699      	mov	r9, r3
 80031ca:	4623      	mov	r3, r4
 80031cc:	eb18 0303 	adds.w	r3, r8, r3
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	462b      	mov	r3, r5
 80031d4:	eb49 0303 	adc.w	r3, r9, r3
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e6:	4629      	mov	r1, r5
 80031e8:	024b      	lsls	r3, r1, #9
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f0:	4621      	mov	r1, r4
 80031f2:	024a      	lsls	r2, r1, #9
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031fa:	2200      	movs	r2, #0
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003204:	f7fc ffe4 	bl	80001d0 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4613      	mov	r3, r2
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	e058      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003212:	4b38      	ldr	r3, [pc, #224]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2200      	movs	r2, #0
 800321a:	4618      	mov	r0, r3
 800321c:	4611      	mov	r1, r2
 800321e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003222:	623b      	str	r3, [r7, #32]
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
 8003228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	0159      	lsls	r1, r3, #5
 800323a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323e:	0150      	lsls	r0, r2, #5
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4641      	mov	r1, r8
 8003246:	ebb2 0a01 	subs.w	sl, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800325c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003264:	ebb2 040a 	subs.w	r4, r2, sl
 8003268:	eb63 050b 	sbc.w	r5, r3, fp
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	00eb      	lsls	r3, r5, #3
 8003276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327a:	00e2      	lsls	r2, r4, #3
 800327c:	4614      	mov	r4, r2
 800327e:	461d      	mov	r5, r3
 8003280:	4643      	mov	r3, r8
 8003282:	18e3      	adds	r3, r4, r3
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	464b      	mov	r3, r9
 8003288:	eb45 0303 	adc.w	r3, r5, r3
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800329a:	4629      	mov	r1, r5
 800329c:	028b      	lsls	r3, r1, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a4:	4621      	mov	r1, r4
 80032a6:	028a      	lsls	r2, r1, #10
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ae:	2200      	movs	r2, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	61fa      	str	r2, [r7, #28]
 80032b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b8:	f7fc ff8a 	bl	80001d0 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80032d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032de:	e002      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3750      	adds	r7, #80	@ 0x50
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	080083e0 	.word	0x080083e0

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	@ (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	080083e0 	.word	0x080083e0

08003368 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e01c      	b.n	80033b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	795b      	ldrb	r3, [r3, #5]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fe14 	bl	8000fb8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0204 	orr.w	r2, r2, #4
 80033a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e041      	b.n	8003452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fe0a 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 f9aa 	bl	8003754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e041      	b.n	80034f0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f839 	bl	80034f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f000 f95b 	bl	8003754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003526:	2302      	movs	r3, #2
 8003528:	e048      	b.n	80035bc <HAL_TIM_OC_ConfigChannel+0xb0>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d839      	bhi.n	80035ac <HAL_TIM_OC_ConfigChannel+0xa0>
 8003538:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <HAL_TIM_OC_ConfigChannel+0x34>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003575 	.word	0x08003575
 8003544:	080035ad 	.word	0x080035ad
 8003548:	080035ad 	.word	0x080035ad
 800354c:	080035ad 	.word	0x080035ad
 8003550:	08003583 	.word	0x08003583
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035ad 	.word	0x080035ad
 8003560:	08003591 	.word	0x08003591
 8003564:	080035ad 	.word	0x080035ad
 8003568:	080035ad 	.word	0x080035ad
 800356c:	080035ad 	.word	0x080035ad
 8003570:	0800359f 	.word	0x0800359f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f996 	bl	80038ac <TIM_OC1_SetConfig>
      break;
 8003580:	e017      	b.n	80035b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f9ff 	bl	800398c <TIM_OC2_SetConfig>
      break;
 800358e:	e010      	b.n	80035b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa6e 	bl	8003a78 <TIM_OC3_SetConfig>
      break;
 800359c:	e009      	b.n	80035b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fadb 	bl	8003b60 <TIM_OC4_SetConfig>
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	75fb      	strb	r3, [r7, #23]
      break;
 80035b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c>
 80035dc:	2302      	movs	r3, #2
 80035de:	e0b4      	b.n	800374a <HAL_TIM_ConfigClockSource+0x186>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003618:	d03e      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0xd4>
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361e:	f200 8087 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003626:	f000 8086 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x172>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362e:	d87f      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b70      	cmp	r3, #112	@ 0x70
 8003632:	d01a      	beq.n	800366a <HAL_TIM_ConfigClockSource+0xa6>
 8003634:	2b70      	cmp	r3, #112	@ 0x70
 8003636:	d87b      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b60      	cmp	r3, #96	@ 0x60
 800363a:	d050      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x11a>
 800363c:	2b60      	cmp	r3, #96	@ 0x60
 800363e:	d877      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b50      	cmp	r3, #80	@ 0x50
 8003642:	d03c      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xfa>
 8003644:	2b50      	cmp	r3, #80	@ 0x50
 8003646:	d873      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003648:	2b40      	cmp	r3, #64	@ 0x40
 800364a:	d058      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x13a>
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d86f      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003650:	2b30      	cmp	r3, #48	@ 0x30
 8003652:	d064      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x15a>
 8003654:	2b30      	cmp	r3, #48	@ 0x30
 8003656:	d86b      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d060      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x15a>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d867      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05c      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x15a>
 8003664:	2b10      	cmp	r3, #16
 8003666:	d05a      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x15a>
 8003668:	e062      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800367a:	f000 fb41 	bl	8003d00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800368c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	609a      	str	r2, [r3, #8]
      break;
 8003696:	e04f      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a8:	f000 fb2a 	bl	8003d00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036ba:	609a      	str	r2, [r3, #8]
      break;
 80036bc:	e03c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 fa9e 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2150      	movs	r1, #80	@ 0x50
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 faf7 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 80036dc:	e02c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 fabd 	bl	8003c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2160      	movs	r1, #96	@ 0x60
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fae7 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 80036fc:	e01c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	461a      	mov	r2, r3
 800370c:	f000 fa7e 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2140      	movs	r1, #64	@ 0x40
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fad7 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 800371c:	e00c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 face 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 800372e:	e003      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e000      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a46      	ldr	r2, [pc, #280]	@ (8003880 <TIM_Base_SetConfig+0x12c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003772:	d00f      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a43      	ldr	r2, [pc, #268]	@ (8003884 <TIM_Base_SetConfig+0x130>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a42      	ldr	r2, [pc, #264]	@ (8003888 <TIM_Base_SetConfig+0x134>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a41      	ldr	r2, [pc, #260]	@ (800388c <TIM_Base_SetConfig+0x138>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a40      	ldr	r2, [pc, #256]	@ (8003890 <TIM_Base_SetConfig+0x13c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a35      	ldr	r2, [pc, #212]	@ (8003880 <TIM_Base_SetConfig+0x12c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02b      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b4:	d027      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a32      	ldr	r2, [pc, #200]	@ (8003884 <TIM_Base_SetConfig+0x130>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d023      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a31      	ldr	r2, [pc, #196]	@ (8003888 <TIM_Base_SetConfig+0x134>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01f      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a30      	ldr	r2, [pc, #192]	@ (800388c <TIM_Base_SetConfig+0x138>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01b      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003890 <TIM_Base_SetConfig+0x13c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d017      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003894 <TIM_Base_SetConfig+0x140>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003898 <TIM_Base_SetConfig+0x144>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00f      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <TIM_Base_SetConfig+0x148>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00b      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a2b      	ldr	r2, [pc, #172]	@ (80038a0 <TIM_Base_SetConfig+0x14c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a2a      	ldr	r2, [pc, #168]	@ (80038a4 <TIM_Base_SetConfig+0x150>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <TIM_Base_SetConfig+0x154>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a10      	ldr	r2, [pc, #64]	@ (8003880 <TIM_Base_SetConfig+0x12c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0xf8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <TIM_Base_SetConfig+0x13c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d105      	bne.n	8003872 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f023 0201 	bic.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
  }
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40010400 	.word	0x40010400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800
 80038a0:	40001800 	.word	0x40001800
 80038a4:	40001c00 	.word	0x40001c00
 80038a8:	40002000 	.word	0x40002000

080038ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 0201 	bic.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 0302 	bic.w	r3, r3, #2
 80038f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <TIM_OC1_SetConfig+0xd8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_OC1_SetConfig+0x64>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <TIM_OC1_SetConfig+0xdc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10c      	bne.n	800392a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0308 	bic.w	r3, r3, #8
 8003916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 0304 	bic.w	r3, r3, #4
 8003928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <TIM_OC1_SetConfig+0xd8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_OC1_SetConfig+0x8e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <TIM_OC1_SetConfig+0xdc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d111      	bne.n	800395e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40010000 	.word	0x40010000
 8003988:	40010400 	.word	0x40010400

0800398c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f023 0210 	bic.w	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0320 	bic.w	r3, r3, #32
 80039d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a22      	ldr	r2, [pc, #136]	@ (8003a70 <TIM_OC2_SetConfig+0xe4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_OC2_SetConfig+0x68>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a21      	ldr	r2, [pc, #132]	@ (8003a74 <TIM_OC2_SetConfig+0xe8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10d      	bne.n	8003a10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <TIM_OC2_SetConfig+0xe4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC2_SetConfig+0x94>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <TIM_OC2_SetConfig+0xe8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d113      	bne.n	8003a48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40010400 	.word	0x40010400

08003a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a21      	ldr	r2, [pc, #132]	@ (8003b58 <TIM_OC3_SetConfig+0xe0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_OC3_SetConfig+0x66>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	@ (8003b5c <TIM_OC3_SetConfig+0xe4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10d      	bne.n	8003afa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <TIM_OC3_SetConfig+0xe0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_OC3_SetConfig+0x92>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <TIM_OC3_SetConfig+0xe4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d113      	bne.n	8003b32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40010400 	.word	0x40010400

08003b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a12      	ldr	r2, [pc, #72]	@ (8003c04 <TIM_OC4_SetConfig+0xa4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC4_SetConfig+0x68>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a11      	ldr	r2, [pc, #68]	@ (8003c08 <TIM_OC4_SetConfig+0xa8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	019b      	lsls	r3, r3, #6
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	40010400 	.word	0x40010400

08003c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 030a 	bic.w	r3, r3, #10
 8003c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 0210 	bic.w	r2, r3, #16
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f043 0307 	orr.w	r3, r3, #7
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	021a      	lsls	r2, r3, #8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e05a      	b.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a21      	ldr	r2, [pc, #132]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d01d      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1d      	ldr	r2, [pc, #116]	@ (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10c      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40010400 	.word	0x40010400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40001800 	.word	0x40001800

08003e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e042      	b.n	8003ed0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd f8ee 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	@ 0x24
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fc85 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0ba      	sub	sp, #232	@ 0xe8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb69 	bl	800460e <UART_Receive_IT>
      return;
 8003f3c:	e25b      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80de 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80d1 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
 8003f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
 8003fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81f2 	beq.w	80043ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 faf4 	bl	800460e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_UART_IRQHandler+0x17a>
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9fc 	bl	8004450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d141      	bne.n	80040ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800409e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1d9      	bne.n	8004066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040be:	4a7e      	ldr	r2, [pc, #504]	@ (80042b8 <HAL_UART_IRQHandler+0x3e0>)
 80040c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd ff5e 	bl	8001f88 <HAL_DMA_Abort_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00e      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f99e 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00a      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f99a 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e006      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f996 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040fe:	e175      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	bf00      	nop
    return;
 8004102:	e173      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 814f 	bne.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8148 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8141 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	f040 80b6 	bne.w	80042bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800415c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8145 	beq.w	80043f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 813e 	bcs.w	80043f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	f000 8088 	beq.w	800429a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d9      	bne.n	800418a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800420c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e1      	bne.n	80041d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004236:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800423c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800427c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800427e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800428a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e3      	bne.n	8004258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fe07 	bl	8001ea8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8c1 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b6:	e09b      	b.n	80043f0 <HAL_UART_IRQHandler+0x518>
 80042b8:	08004517 	.word	0x08004517
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 808e 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8089 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004306:	647a      	str	r2, [r7, #68]	@ 0x44
 8004308:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800430c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	623b      	str	r3, [r7, #32]
   return(result);
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800433e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0310 	bic.w	r3, r3, #16
 8004376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	617b      	str	r3, [r7, #20]
   return(result);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e3      	bne.n	8004360 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800439e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f847 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043aa:	e023      	b.n	80043f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8ba 	bl	800453e <UART_Transmit_IT>
    return;
 80043ca:	e014      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8fa 	bl	80045de <UART_EndTransmit_IT>
    return;
 80043ea:	e004      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f4:	bf00      	nop
  }
}
 80043f6:	37e8      	adds	r7, #232	@ 0xe8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b095      	sub	sp, #84	@ 0x54
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004478:	643a      	str	r2, [r7, #64]	@ 0x40
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800447e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	61fb      	str	r3, [r7, #28]
   return(result);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d119      	bne.n	80044fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f023 0310 	bic.w	r3, r3, #16
 80044de:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e8:	61ba      	str	r2, [r7, #24]
 80044ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	613b      	str	r3, [r7, #16]
   return(result);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e5      	bne.n	80044c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800450a:	bf00      	nop
 800450c:	3754      	adds	r7, #84	@ 0x54
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff ff77 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b21      	cmp	r3, #33	@ 0x21
 8004550:	d13e      	bne.n	80045d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	d114      	bne.n	8004586 <UART_Transmit_IT+0x48>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d110      	bne.n	8004586 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	1c9a      	adds	r2, r3, #2
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	621a      	str	r2, [r3, #32]
 8004584:	e008      	b.n	8004598 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	1c59      	adds	r1, r3, #1
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6211      	str	r1, [r2, #32]
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4619      	mov	r1, r3
 80045a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10f      	bne.n	80045cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fefc 	bl	80043fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08c      	sub	sp, #48	@ 0x30
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b22      	cmp	r3, #34	@ 0x22
 8004620:	f040 80ae 	bne.w	8004780 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462c:	d117      	bne.n	800465e <UART_Receive_IT+0x50>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d113      	bne.n	800465e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464c:	b29a      	uxth	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
 800465c:	e026      	b.n	80046ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004670:	d007      	beq.n	8004682 <UART_Receive_IT+0x74>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <UART_Receive_IT+0x82>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	e008      	b.n	80046a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469c:	b2da      	uxtb	r2, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d15d      	bne.n	800477c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0220 	bic.w	r2, r2, #32
 80046ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	2b01      	cmp	r3, #1
 8004704:	d135      	bne.n	8004772 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	623a      	str	r2, [r7, #32]
 800472e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	6a3a      	ldr	r2, [r7, #32]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	61bb      	str	r3, [r7, #24]
   return(result);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b10      	cmp	r3, #16
 800474c:	d10a      	bne.n	8004764 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fe64 	bl	8004438 <HAL_UARTEx_RxEventCallback>
 8004770:	e002      	b.n	8004778 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fe4c 	bl	8004410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e002      	b.n	8004782 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3730      	adds	r7, #48	@ 0x30
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b0c0      	sub	sp, #256	@ 0x100
 8004792:	af00      	add	r7, sp, #0
 8004794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	68d9      	ldr	r1, [r3, #12]
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	ea40 0301 	orr.w	r3, r0, r1
 80047b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047e4:	f021 010c 	bic.w	r1, r1, #12
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047f2:	430b      	orrs	r3, r1
 80047f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	6999      	ldr	r1, [r3, #24]
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	ea40 0301 	orr.w	r3, r0, r1
 8004812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a58 <UART_SetConfig+0x2cc>)
 800481c:	429a      	cmp	r2, r3
 800481e:	d005      	beq.n	800482c <UART_SetConfig+0xa0>
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b8d      	ldr	r3, [pc, #564]	@ (8004a5c <UART_SetConfig+0x2d0>)
 8004828:	429a      	cmp	r2, r3
 800482a:	d104      	bne.n	8004836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe fd88 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8004830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004834:	e003      	b.n	800483e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004836:	f7fe fd6f 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 800483a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004848:	f040 810c 	bne.w	8004a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800484c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800485a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800485e:	4622      	mov	r2, r4
 8004860:	462b      	mov	r3, r5
 8004862:	1891      	adds	r1, r2, r2
 8004864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004866:	415b      	adcs	r3, r3
 8004868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800486a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800486e:	4621      	mov	r1, r4
 8004870:	eb12 0801 	adds.w	r8, r2, r1
 8004874:	4629      	mov	r1, r5
 8004876:	eb43 0901 	adc.w	r9, r3, r1
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488e:	4690      	mov	r8, r2
 8004890:	4699      	mov	r9, r3
 8004892:	4623      	mov	r3, r4
 8004894:	eb18 0303 	adds.w	r3, r8, r3
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800489c:	462b      	mov	r3, r5
 800489e:	eb49 0303 	adc.w	r3, r9, r3
 80048a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ba:	460b      	mov	r3, r1
 80048bc:	18db      	adds	r3, r3, r3
 80048be:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c0:	4613      	mov	r3, r2
 80048c2:	eb42 0303 	adc.w	r3, r2, r3
 80048c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048d0:	f7fb fc7e 	bl	80001d0 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4b61      	ldr	r3, [pc, #388]	@ (8004a60 <UART_SetConfig+0x2d4>)
 80048da:	fba3 2302 	umull	r2, r3, r3, r2
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	011c      	lsls	r4, r3, #4
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048fc:	415b      	adcs	r3, r3
 80048fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004904:	4641      	mov	r1, r8
 8004906:	eb12 0a01 	adds.w	sl, r2, r1
 800490a:	4649      	mov	r1, r9
 800490c:	eb43 0b01 	adc.w	fp, r3, r1
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800491c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004924:	4692      	mov	sl, r2
 8004926:	469b      	mov	fp, r3
 8004928:	4643      	mov	r3, r8
 800492a:	eb1a 0303 	adds.w	r3, sl, r3
 800492e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004932:	464b      	mov	r3, r9
 8004934:	eb4b 0303 	adc.w	r3, fp, r3
 8004938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800494c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004950:	460b      	mov	r3, r1
 8004952:	18db      	adds	r3, r3, r3
 8004954:	643b      	str	r3, [r7, #64]	@ 0x40
 8004956:	4613      	mov	r3, r2
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
 800495e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004966:	f7fb fc33 	bl	80001d0 <__aeabi_uldivmod>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4611      	mov	r1, r2
 8004970:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004972:	fba3 2301 	umull	r2, r3, r3, r1
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2264      	movs	r2, #100	@ 0x64
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	1acb      	subs	r3, r1, r3
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004986:	4b36      	ldr	r3, [pc, #216]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004988:	fba3 2302 	umull	r2, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004994:	441c      	add	r4, r3
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049a8:	4642      	mov	r2, r8
 80049aa:	464b      	mov	r3, r9
 80049ac:	1891      	adds	r1, r2, r2
 80049ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049b0:	415b      	adcs	r3, r3
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049b8:	4641      	mov	r1, r8
 80049ba:	1851      	adds	r1, r2, r1
 80049bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80049be:	4649      	mov	r1, r9
 80049c0:	414b      	adcs	r3, r1
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049d0:	4659      	mov	r1, fp
 80049d2:	00cb      	lsls	r3, r1, #3
 80049d4:	4651      	mov	r1, sl
 80049d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049da:	4651      	mov	r1, sl
 80049dc:	00ca      	lsls	r2, r1, #3
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	4642      	mov	r2, r8
 80049e6:	189b      	adds	r3, r3, r2
 80049e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049ec:	464b      	mov	r3, r9
 80049ee:	460a      	mov	r2, r1
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	18db      	adds	r3, r3, r3
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a12:	4613      	mov	r3, r2
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a22:	f7fb fbd5 	bl	80001d0 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	2164      	movs	r1, #100	@ 0x64
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	3332      	adds	r3, #50	@ 0x32
 8004a3e:	4a08      	ldr	r2, [pc, #32]	@ (8004a60 <UART_SetConfig+0x2d4>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	f003 0207 	and.w	r2, r3, #7
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4422      	add	r2, r4
 8004a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a54:	e106      	b.n	8004c64 <UART_SetConfig+0x4d8>
 8004a56:	bf00      	nop
 8004a58:	40011000 	.word	0x40011000
 8004a5c:	40011400 	.word	0x40011400
 8004a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a76:	4642      	mov	r2, r8
 8004a78:	464b      	mov	r3, r9
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	6239      	str	r1, [r7, #32]
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a86:	4641      	mov	r1, r8
 8004a88:	1854      	adds	r4, r2, r1
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	eb43 0501 	adc.w	r5, r3, r1
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	00eb      	lsls	r3, r5, #3
 8004a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9e:	00e2      	lsls	r2, r4, #3
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	461d      	mov	r5, r3
 8004aa4:	4643      	mov	r3, r8
 8004aa6:	18e3      	adds	r3, r4, r3
 8004aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004aac:	464b      	mov	r3, r9
 8004aae:	eb45 0303 	adc.w	r3, r5, r3
 8004ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	008b      	lsls	r3, r1, #2
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004adc:	4621      	mov	r1, r4
 8004ade:	008a      	lsls	r2, r1, #2
 8004ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ae4:	f7fb fb74 	bl	80001d0 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b60      	ldr	r3, [pc, #384]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004aee:	fba3 2302 	umull	r2, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	011c      	lsls	r4, r3, #4
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	61b9      	str	r1, [r7, #24]
 8004b10:	415b      	adcs	r3, r3
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b18:	4641      	mov	r1, r8
 8004b1a:	1851      	adds	r1, r2, r1
 8004b1c:	6139      	str	r1, [r7, #16]
 8004b1e:	4649      	mov	r1, r9
 8004b20:	414b      	adcs	r3, r1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b30:	4659      	mov	r1, fp
 8004b32:	00cb      	lsls	r3, r1, #3
 8004b34:	4651      	mov	r1, sl
 8004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	00ca      	lsls	r2, r1, #3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	4603      	mov	r3, r0
 8004b44:	4642      	mov	r2, r8
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	460a      	mov	r2, r1
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b70:	4649      	mov	r1, r9
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	008a      	lsls	r2, r1, #2
 8004b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b82:	f7fb fb25 	bl	80001d0 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4b38      	ldr	r3, [pc, #224]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2264      	movs	r2, #100	@ 0x64
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	1acb      	subs	r3, r1, r3
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	3332      	adds	r3, #50	@ 0x32
 8004ba0:	4a33      	ldr	r2, [pc, #204]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bac:	441c      	add	r4, r3
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bfe:	464b      	mov	r3, r9
 8004c00:	460a      	mov	r2, r1
 8004c02:	eb42 0303 	adc.w	r3, r2, r3
 8004c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c20:	4649      	mov	r1, r9
 8004c22:	008b      	lsls	r3, r1, #2
 8004c24:	4641      	mov	r1, r8
 8004c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	008a      	lsls	r2, r1, #2
 8004c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c32:	f7fb facd 	bl	80001d0 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2164      	movs	r1, #100	@ 0x64
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	3332      	adds	r3, #50	@ 0x32
 8004c4e:	4a08      	ldr	r2, [pc, #32]	@ (8004c70 <UART_SetConfig+0x4e4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 020f 	and.w	r2, r3, #15
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4422      	add	r2, r4
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c70:	51eb851f 	.word	0x51eb851f

08004c74 <__NVIC_SetPriority>:
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	6039      	str	r1, [r7, #0]
 8004c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	db0a      	blt.n	8004c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	490c      	ldr	r1, [pc, #48]	@ (8004cc0 <__NVIC_SetPriority+0x4c>)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	0112      	lsls	r2, r2, #4
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	440b      	add	r3, r1
 8004c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c9c:	e00a      	b.n	8004cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4908      	ldr	r1, [pc, #32]	@ (8004cc4 <__NVIC_SetPriority+0x50>)
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	3b04      	subs	r3, #4
 8004cac:	0112      	lsls	r2, r2, #4
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	761a      	strb	r2, [r3, #24]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	e000e100 	.word	0xe000e100
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f06f 0004 	mvn.w	r0, #4
 8004cd2:	f7ff ffcf 	bl	8004c74 <__NVIC_SetPriority>
#endif
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce2:	f3ef 8305 	mrs	r3, IPSR
 8004ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ce8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cee:	f06f 0305 	mvn.w	r3, #5
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	e00c      	b.n	8004d10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <osKernelInitialize+0x44>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cfe:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <osKernelInitialize+0x44>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	e002      	b.n	8004d10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d10:	687b      	ldr	r3, [r7, #4]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000c40 	.word	0x20000c40

08004d24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d2a:	f3ef 8305 	mrs	r3, IPSR
 8004d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8004d30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d36:	f06f 0305 	mvn.w	r3, #5
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	e010      	b.n	8004d60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <osKernelStart+0x48>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d109      	bne.n	8004d5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d46:	f7ff ffbf 	bl	8004cc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <osKernelStart+0x48>)
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d50:	f001 fc08 	bl	8006564 <vTaskStartScheduler>
      stat = osOK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	e002      	b.n	8004d60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d60:	687b      	ldr	r3, [r7, #4]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000c40 	.word	0x20000c40

08004d70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08e      	sub	sp, #56	@ 0x38
 8004d74:	af04      	add	r7, sp, #16
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d80:	f3ef 8305 	mrs	r3, IPSR
 8004d84:	617b      	str	r3, [r7, #20]
  return(result);
 8004d86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d17e      	bne.n	8004e8a <osThreadNew+0x11a>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d07b      	beq.n	8004e8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d96:	2318      	movs	r3, #24
 8004d98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004da2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d045      	beq.n	8004e36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <osThreadNew+0x48>
        name = attr->name;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <osThreadNew+0x6e>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b38      	cmp	r3, #56	@ 0x38
 8004dd0:	d805      	bhi.n	8004dde <osThreadNew+0x6e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <osThreadNew+0x72>
        return (NULL);
 8004dde:	2300      	movs	r3, #0
 8004de0:	e054      	b.n	8004e8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	089b      	lsrs	r3, r3, #2
 8004df0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00e      	beq.n	8004e18 <osThreadNew+0xa8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2ba7      	cmp	r3, #167	@ 0xa7
 8004e00:	d90a      	bls.n	8004e18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <osThreadNew+0xa8>
        mem = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e010      	b.n	8004e3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10c      	bne.n	8004e3a <osThreadNew+0xca>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d108      	bne.n	8004e3a <osThreadNew+0xca>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <osThreadNew+0xca>
          mem = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e001      	b.n	8004e3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d110      	bne.n	8004e62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e48:	9202      	str	r2, [sp, #8]
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f001 f990 	bl	800617c <xTaskCreateStatic>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e013      	b.n	8004e8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d110      	bne.n	8004e8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	f107 0310 	add.w	r3, r7, #16
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f001 f9de 	bl	800623c <xTaskCreate>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <osThreadNew+0x11a>
            hTask = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e8a:	693b      	ldr	r3, [r7, #16]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3728      	adds	r7, #40	@ 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9c:	f3ef 8305 	mrs	r3, IPSR
 8004ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <osDelay+0x1c>
    stat = osErrorISR;
 8004ea8:	f06f 0305 	mvn.w	r3, #5
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e007      	b.n	8004ec0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fb1c 	bl	80064f8 <vTaskDelay>
    }
  }

  return (stat);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f002 fc84 	bl	80077e0 <pvTimerGetTimerID>
 8004ed8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <TimerCallback+0x22>
    callb->func (callb->arg);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6852      	ldr	r2, [r2, #4]
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4798      	blx	r3
  }
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08c      	sub	sp, #48	@ 0x30
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	460b      	mov	r3, r1
 8004f02:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f08:	f3ef 8305 	mrs	r3, IPSR
 8004f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d163      	bne.n	8004fdc <osTimerNew+0xe8>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d060      	beq.n	8004fdc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004f1a:	2008      	movs	r0, #8
 8004f1c:	f002 fed6 	bl	8007ccc <pvPortMalloc>
 8004f20:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d059      	beq.n	8004fdc <osTimerNew+0xe8>
      callb->func = func;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e001      	b.n	8004f44 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01c      	beq.n	8004f8e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <osTimerNew+0x6e>
          name = attr->name;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <osTimerNew+0x84>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004f70:	d902      	bls.n	8004f78 <osTimerNew+0x84>
          mem = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e00c      	b.n	8004f92 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <osTimerNew+0x9e>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <osTimerNew+0x9e>
            mem = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e001      	b.n	8004f92 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10c      	bne.n	8004fb2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <osTimerNew+0xf4>)
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004faa:	f002 f88c 	bl	80070c6 <xTimerCreateStatic>
 8004fae:	6238      	str	r0, [r7, #32]
 8004fb0:	e00b      	b.n	8004fca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <osTimerNew+0xf4>)
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fc4:	f002 f85e 	bl	8007084 <xTimerCreate>
 8004fc8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <osTimerNew+0xe8>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <osTimerNew+0xe8>
        vPortFree (callb);
 8004fd6:	6978      	ldr	r0, [r7, #20]
 8004fd8:	f002 ff46 	bl	8007e68 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3728      	adds	r7, #40	@ 0x28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	08004ecb 	.word	0x08004ecb

08004fec <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff8:	f3ef 8305 	mrs	r3, IPSR
 8004ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ffe:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005000:	2b00      	cmp	r3, #0
 8005002:	d12d      	bne.n	8005060 <osEventFlagsNew+0x74>
    mem = -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <osEventFlagsNew+0x3a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b1f      	cmp	r3, #31
 800501e:	d902      	bls.n	8005026 <osEventFlagsNew+0x3a>
        mem = 1;
 8005020:	2301      	movs	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e00c      	b.n	8005040 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <osEventFlagsNew+0x54>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <osEventFlagsNew+0x54>
          mem = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	e001      	b.n	8005040 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d106      	bne.n	8005054 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f950 	bl	80052f0 <xEventGroupCreateStatic>
 8005050:	6178      	str	r0, [r7, #20]
 8005052:	e005      	b.n	8005060 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800505a:	f000 f982 	bl	8005362 <xEventGroupCreate>
 800505e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005060:	697b      	ldr	r3, [r7, #20]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005076:	f3ef 8305 	mrs	r3, IPSR
 800507a:	60bb      	str	r3, [r7, #8]
  return(result);
 800507c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800507e:	2b00      	cmp	r3, #0
 8005080:	d174      	bne.n	800516c <osMutexNew+0x102>
    if (attr != NULL) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e001      	b.n	8005094 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <osMutexNew+0x3a>
      rmtx = 1U;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e001      	b.n	80050a8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d15c      	bne.n	800516c <osMutexNew+0x102>
      mem = -1;
 80050b2:	f04f 33ff 	mov.w	r3, #4294967295
 80050b6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d015      	beq.n	80050ea <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <osMutexNew+0x6a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b4f      	cmp	r3, #79	@ 0x4f
 80050cc:	d902      	bls.n	80050d4 <osMutexNew+0x6a>
          mem = 1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e00c      	b.n	80050ee <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <osMutexNew+0x84>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <osMutexNew+0x84>
            mem = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e001      	b.n	80050ee <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d112      	bne.n	800511a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4619      	mov	r1, r3
 8005100:	2004      	movs	r0, #4
 8005102:	f000 fb74 	bl	80057ee <xQueueCreateMutexStatic>
 8005106:	61f8      	str	r0, [r7, #28]
 8005108:	e016      	b.n	8005138 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4619      	mov	r1, r3
 8005110:	2001      	movs	r0, #1
 8005112:	f000 fb6c 	bl	80057ee <xQueueCreateMutexStatic>
 8005116:	61f8      	str	r0, [r7, #28]
 8005118:	e00e      	b.n	8005138 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005126:	2004      	movs	r0, #4
 8005128:	f000 fb49 	bl	80057be <xQueueCreateMutex>
 800512c:	61f8      	str	r0, [r7, #28]
 800512e:	e003      	b.n	8005138 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005130:	2001      	movs	r0, #1
 8005132:	f000 fb44 	bl	80057be <xQueueCreateMutex>
 8005136:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <osMutexNew+0xee>
        if (attr != NULL) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <osMutexNew+0xe2>
          name = attr->name;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e001      	b.n	8005150 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	69f8      	ldr	r0, [r7, #28]
 8005154:	f000 ff8a 	bl	800606c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <osMutexNew+0x102>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800516c:	69fb      	ldr	r3, [r7, #28]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	@ 0x28
 800517a:	af02      	add	r7, sp, #8
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005186:	f3ef 8305 	mrs	r3, IPSR
 800518a:	613b      	str	r3, [r7, #16]
  return(result);
 800518c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800518e:	2b00      	cmp	r3, #0
 8005190:	d175      	bne.n	800527e <osSemaphoreNew+0x108>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d072      	beq.n	800527e <osSemaphoreNew+0x108>
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	429a      	cmp	r2, r3
 800519e:	d86e      	bhi.n	800527e <osSemaphoreNew+0x108>
    mem = -1;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <osSemaphoreNew+0x4c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80051ba:	d902      	bls.n	80051c2 <osSemaphoreNew+0x4c>
        mem = 1;
 80051bc:	2301      	movs	r3, #1
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e00c      	b.n	80051dc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <osSemaphoreNew+0x66>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <osSemaphoreNew+0x66>
          mem = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e001      	b.n	80051dc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d04c      	beq.n	800527e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d128      	bne.n	800523c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10a      	bne.n	8005206 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2203      	movs	r2, #3
 80051f6:	9200      	str	r2, [sp, #0]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	2001      	movs	r0, #1
 80051fe:	f000 f9e9 	bl	80055d4 <xQueueGenericCreateStatic>
 8005202:	61f8      	str	r0, [r7, #28]
 8005204:	e005      	b.n	8005212 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005206:	2203      	movs	r2, #3
 8005208:	2100      	movs	r1, #0
 800520a:	2001      	movs	r0, #1
 800520c:	f000 fa5f 	bl	80056ce <xQueueGenericCreate>
 8005210:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d022      	beq.n	800525e <osSemaphoreNew+0xe8>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01f      	beq.n	800525e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800521e:	2300      	movs	r3, #0
 8005220:	2200      	movs	r2, #0
 8005222:	2100      	movs	r1, #0
 8005224:	69f8      	ldr	r0, [r7, #28]
 8005226:	f000 fb6b 	bl	8005900 <xQueueGenericSend>
 800522a:	4603      	mov	r3, r0
 800522c:	2b01      	cmp	r3, #1
 800522e:	d016      	beq.n	800525e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005230:	69f8      	ldr	r0, [r7, #28]
 8005232:	f000 fde7 	bl	8005e04 <vQueueDelete>
            hSemaphore = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e010      	b.n	800525e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d108      	bne.n	8005254 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	461a      	mov	r2, r3
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 faea 	bl	8005824 <xQueueCreateCountingSemaphoreStatic>
 8005250:	61f8      	str	r0, [r7, #28]
 8005252:	e004      	b.n	800525e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fb1d 	bl	8005896 <xQueueCreateCountingSemaphore>
 800525c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <osSemaphoreNew+0xfc>
          name = attr->name;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e001      	b.n	8005276 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005276:	6979      	ldr	r1, [r7, #20]
 8005278:	69f8      	ldr	r0, [r7, #28]
 800527a:	f000 fef7 	bl	800606c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800527e:	69fb      	ldr	r3, [r7, #28]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a07      	ldr	r2, [pc, #28]	@ (80052b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4a06      	ldr	r2, [pc, #24]	@ (80052b8 <vApplicationGetIdleTaskMemory+0x30>)
 800529e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2280      	movs	r2, #128	@ 0x80
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000c44 	.word	0x20000c44
 80052b8:	20000cec 	.word	0x20000cec

080052bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4a07      	ldr	r2, [pc, #28]	@ (80052e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80052cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a06      	ldr	r2, [pc, #24]	@ (80052ec <vApplicationGetTimerTaskMemory+0x30>)
 80052d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	20000eec 	.word	0x20000eec
 80052ec:	20000f94 	.word	0x20000f94

080052f0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005316:	2320      	movs	r3, #32
 8005318:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b20      	cmp	r3, #32
 800531e:	d00b      	beq.n	8005338 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3304      	adds	r3, #4
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f822 	bl	8005396 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005358:	697b      	ldr	r3, [r7, #20]
	}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005368:	2020      	movs	r0, #32
 800536a:	f002 fcaf 	bl	8007ccc <pvPortMalloc>
 800536e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f808 	bl	8005396 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800538c:	687b      	ldr	r3, [r7, #4]
	}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 0208 	add.w	r2, r3, #8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295
 80053ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f103 0208 	add.w	r2, r3, #8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f103 0208 	add.w	r2, r3, #8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d103      	bne.n	8005458 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e00c      	b.n	8005472 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3308      	adds	r3, #8
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e002      	b.n	8005466 <vListInsert+0x2e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d2f6      	bcs.n	8005460 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6892      	ldr	r2, [r2, #8]
 80054c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6852      	ldr	r2, [r2, #4]
 80054ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d103      	bne.n	80054de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1e5a      	subs	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericReset+0x2c>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60bb      	str	r3, [r7, #8]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800552c:	f002 faac 	bl	8007a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555c:	3b01      	subs	r3, #1
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	441a      	add	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	22ff      	movs	r2, #255	@ 0xff
 8005570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	22ff      	movs	r2, #255	@ 0xff
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d114      	bne.n	80055ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01a      	beq.n	80055c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3310      	adds	r3, #16
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fa86 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d012      	beq.n	80055c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <xQueueGenericReset+0xd0>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	e009      	b.n	80055c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3310      	adds	r3, #16
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fef0 	bl	8005396 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3324      	adds	r3, #36	@ 0x24
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff feeb 	bl	8005396 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055c0:	f002 fa94 	bl	8007aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055c4:	2301      	movs	r3, #1
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08e      	sub	sp, #56	@ 0x38
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <xQueueGenericCreateStatic+0x56>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <xQueueGenericCreateStatic+0x5a>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueGenericCreateStatic+0x5c>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	623b      	str	r3, [r7, #32]
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <xQueueGenericCreateStatic+0x84>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <xQueueGenericCreateStatic+0x88>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <xQueueGenericCreateStatic+0x8a>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	61fb      	str	r3, [r7, #28]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800567a:	2350      	movs	r3, #80	@ 0x50
 800567c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b50      	cmp	r3, #80	@ 0x50
 8005682:	d00b      	beq.n	800569c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800569c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80056a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f840 	bl	8005744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3730      	adds	r7, #48	@ 0x30
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b08a      	sub	sp, #40	@ 0x28
 80056d2:	af02      	add	r7, sp, #8
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	613b      	str	r3, [r7, #16]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	3350      	adds	r3, #80	@ 0x50
 8005708:	4618      	mov	r0, r3
 800570a:	f002 fadf 	bl	8007ccc <pvPortMalloc>
 800570e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3350      	adds	r3, #80	@ 0x50
 800571e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005728:	79fa      	ldrb	r2, [r7, #7]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4613      	mov	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f805 	bl	8005744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800573a:	69bb      	ldr	r3, [r7, #24]
	}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e002      	b.n	8005766 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005772:	2101      	movs	r1, #1
 8005774:	69b8      	ldr	r0, [r7, #24]
 8005776:	f7ff fec3 	bl	8005500 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80057aa:	2300      	movs	r3, #0
 80057ac:	2200      	movs	r2, #0
 80057ae:	2100      	movs	r1, #0
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8a5 	bl	8005900 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	4603      	mov	r3, r0
 80057c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057c8:	2301      	movs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6939      	ldr	r1, [r7, #16]
 80057d6:	6978      	ldr	r0, [r7, #20]
 80057d8:	f7ff ff79 	bl	80056ce <xQueueGenericCreate>
 80057dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff ffd3 	bl	800578a <prvInitialiseMutex>

		return xNewQueue;
 80057e4:	68fb      	ldr	r3, [r7, #12]
	}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b088      	sub	sp, #32
 80057f2:	af02      	add	r7, sp, #8
 80057f4:	4603      	mov	r3, r0
 80057f6:	6039      	str	r1, [r7, #0]
 80057f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057fa:	2301      	movs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2200      	movs	r2, #0
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	6978      	ldr	r0, [r7, #20]
 800580e:	f7ff fee1 	bl	80055d4 <xQueueGenericCreateStatic>
 8005812:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff ffb8 	bl	800578a <prvInitialiseMutex>

		return xNewQueue;
 800581a:	68fb      	ldr	r3, [r7, #12]
	}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	@ 0x28
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61bb      	str	r3, [r7, #24]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90b      	bls.n	800586e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	617b      	str	r3, [r7, #20]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800586e:	2302      	movs	r3, #2
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	2100      	movs	r1, #0
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7ff feab 	bl	80055d4 <xQueueGenericCreateStatic>
 800587e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800588c:	69fb      	ldr	r3, [r7, #28]
	}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	613b      	str	r3, [r7, #16]
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	e7fd      	b.n	80058ba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d90b      	bls.n	80058de <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	60fb      	str	r3, [r7, #12]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80058de:	2202      	movs	r2, #2
 80058e0:	2100      	movs	r1, #0
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fef3 	bl	80056ce <xQueueGenericCreate>
 80058e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058f6:	697b      	ldr	r3, [r7, #20]
	}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08e      	sub	sp, #56	@ 0x38
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800590e:	2300      	movs	r3, #0
 8005910:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <xQueueGenericSend+0x34>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <xQueueGenericSend+0x42>
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <xQueueGenericSend+0x46>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueGenericSend+0x48>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueGenericSend+0x64>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d103      	bne.n	8005972 <xQueueGenericSend+0x72>
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <xQueueGenericSend+0x76>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <xQueueGenericSend+0x78>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <xQueueGenericSend+0x94>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	623b      	str	r3, [r7, #32]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005994:	f001 fa4a 	bl	8006e2c <xTaskGetSchedulerState>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <xQueueGenericSend+0xa4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <xQueueGenericSend+0xa8>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <xQueueGenericSend+0xaa>
 80059a8:	2300      	movs	r3, #0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	61fb      	str	r3, [r7, #28]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059c6:	f002 f85f 	bl	8007a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <xQueueGenericSend+0xdc>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d129      	bne.n	8005a30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059e2:	f000 fa33 	bl	8005e4c <prvCopyDataToQueue>
 80059e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	3324      	adds	r3, #36	@ 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f853 	bl	8006aa0 <xTaskRemoveFromEventList>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d013      	beq.n	8005a28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a00:	4b3f      	ldr	r3, [pc, #252]	@ (8005b00 <xQueueGenericSend+0x200>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	e00a      	b.n	8005a28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a18:	4b39      	ldr	r3, [pc, #228]	@ (8005b00 <xQueueGenericSend+0x200>)
 8005a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a28:	f002 f860 	bl	8007aec <vPortExitCritical>
				return pdPASS;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e063      	b.n	8005af8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d103      	bne.n	8005a3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a36:	f002 f859 	bl	8007aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e05c      	b.n	8005af8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 f88d 	bl	8006b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a52:	f002 f84b 	bl	8007aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a56:	f000 fdf5 	bl	8006644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a5a:	f002 f815 	bl	8007a88 <vPortEnterCritical>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d103      	bne.n	8005a74 <xQueueGenericSend+0x174>
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d103      	bne.n	8005a8a <xQueueGenericSend+0x18a>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a8a:	f002 f82f 	bl	8007aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a8e:	1d3a      	adds	r2, r7, #4
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f87c 	bl	8006b94 <xTaskCheckForTimeOut>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d124      	bne.n	8005aec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aa4:	f000 faca 	bl	800603c <prvIsQueueFull>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	3310      	adds	r3, #16
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 ffa0 	bl	80069fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005abe:	f000 fa55 	bl	8005f6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ac2:	f000 fdcd 	bl	8006660 <xTaskResumeAll>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f47f af7c 	bne.w	80059c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ace:	4b0c      	ldr	r3, [pc, #48]	@ (8005b00 <xQueueGenericSend+0x200>)
 8005ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	e772      	b.n	80059c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ae0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae2:	f000 fa43 	bl	8005f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae6:	f000 fdbb 	bl	8006660 <xTaskResumeAll>
 8005aea:	e76c      	b.n	80059c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aee:	f000 fa3d 	bl	8005f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af2:	f000 fdb5 	bl	8006660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005af6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3738      	adds	r7, #56	@ 0x38
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b090      	sub	sp, #64	@ 0x40
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <xQueueGenericSendFromISR+0x3e>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <xQueueGenericSendFromISR+0x42>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueGenericSendFromISR+0x44>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSendFromISR+0x6e>
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSendFromISR+0x72>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSendFromISR+0x74>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b94:	f002 f858 	bl	8007c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b98:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61fa      	str	r2, [r7, #28]
 8005bae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <xQueueGenericSendFromISR+0xc2>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d12f      	bne.n	8005c26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bdc:	f000 f936 	bl	8005e4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005be0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d112      	bne.n	8005c10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf4:	3324      	adds	r3, #36	@ 0x24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 ff52 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e007      	b.n	8005c20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c14:	3301      	adds	r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	b25a      	sxtb	r2, r3
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c20:	2301      	movs	r3, #1
 8005c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c24:	e001      	b.n	8005c2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3740      	adds	r7, #64	@ 0x40
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08c      	sub	sp, #48	@ 0x30
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <xQueueReceive+0x32>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	623b      	str	r3, [r7, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	e7fd      	b.n	8005c6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <xQueueReceive+0x40>
 8005c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xQueueReceive+0x44>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <xQueueReceive+0x46>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <xQueueReceive+0x62>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca2:	f001 f8c3 	bl	8006e2c <xTaskGetSchedulerState>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <xQueueReceive+0x72>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueReceive+0x76>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueReceive+0x78>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <xQueueReceive+0x94>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61bb      	str	r3, [r7, #24]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd4:	f001 fed8 	bl	8007a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01f      	beq.n	8005d24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce8:	f000 f91a 	bl	8005f20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	3310      	adds	r3, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fecd 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e00 <xQueueReceive+0x1c0>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d1c:	f001 fee6 	bl	8007aec <vPortExitCritical>
				return pdPASS;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e069      	b.n	8005df8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2a:	f001 fedf 	bl	8007aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e062      	b.n	8005df8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 ff13 	bl	8006b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d42:	2301      	movs	r3, #1
 8005d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d46:	f001 fed1 	bl	8007aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4a:	f000 fc7b 	bl	8006644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d4e:	f001 fe9b 	bl	8007a88 <vPortEnterCritical>
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d103      	bne.n	8005d68 <xQueueReceive+0x128>
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d103      	bne.n	8005d7e <xQueueReceive+0x13e>
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d7e:	f001 feb5 	bl	8007aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d82:	1d3a      	adds	r2, r7, #4
 8005d84:	f107 0310 	add.w	r3, r7, #16
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ff02 	bl	8006b94 <xTaskCheckForTimeOut>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d123      	bne.n	8005dde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d98:	f000 f93a 	bl	8006010 <prvIsQueueEmpty>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d017      	beq.n	8005dd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da4:	3324      	adds	r3, #36	@ 0x24
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fe26 	bl	80069fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db2:	f000 f8db 	bl	8005f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005db6:	f000 fc53 	bl	8006660 <xTaskResumeAll>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d189      	bne.n	8005cd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e00 <xQueueReceive+0x1c0>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	e780      	b.n	8005cd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd4:	f000 f8ca 	bl	8005f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dd8:	f000 fc42 	bl	8006660 <xTaskResumeAll>
 8005ddc:	e77a      	b.n	8005cd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de0:	f000 f8c4 	bl	8005f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de4:	f000 fc3c 	bl	8006660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005de8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dea:	f000 f911 	bl	8006010 <prvIsQueueEmpty>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f43f af6f 	beq.w	8005cd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005df6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3730      	adds	r7, #48	@ 0x30
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <vQueueDelete+0x2a>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60bb      	str	r3, [r7, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f946 	bl	80060c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f002 f812 	bl	8007e68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d14d      	bne.n	8005f0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fff6 	bl	8006e68 <xTaskPriorityDisinherit>
 8005e7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	e043      	b.n	8005f0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d119      	bne.n	8005ec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6858      	ldr	r0, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	461a      	mov	r2, r3
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	f002 f98a 	bl	80081b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	441a      	add	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d32b      	bcc.n	8005f0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	e026      	b.n	8005f0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68d8      	ldr	r0, [r3, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	f002 f970 	bl	80081b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	425b      	negs	r3, r3
 8005eda:	441a      	add	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d207      	bcs.n	8005efc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	425b      	negs	r3, r3
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d105      	bne.n	8005f0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f16:	697b      	ldr	r3, [r7, #20]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	441a      	add	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d303      	bcc.n	8005f54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68d9      	ldr	r1, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6838      	ldr	r0, [r7, #0]
 8005f60:	f002 f926 	bl	80081b0 <memcpy>
	}
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f74:	f001 fd88 	bl	8007a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f80:	e011      	b.n	8005fa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d012      	beq.n	8005fb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3324      	adds	r3, #36	@ 0x24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fd86 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f9a:	f000 fe5f 	bl	8006c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dce9      	bgt.n	8005f82 <prvUnlockQueue+0x16>
 8005fae:	e000      	b.n	8005fb2 <prvUnlockQueue+0x46>
					break;
 8005fb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	22ff      	movs	r2, #255	@ 0xff
 8005fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fd97 	bl	8007aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fbe:	f001 fd63 	bl	8007a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fca:	e011      	b.n	8005ff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3310      	adds	r3, #16
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fd61 	bl	8006aa0 <xTaskRemoveFromEventList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fe4:	f000 fe3a 	bl	8006c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	dce9      	bgt.n	8005fcc <prvUnlockQueue+0x60>
 8005ff8:	e000      	b.n	8005ffc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ffa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	22ff      	movs	r2, #255	@ 0xff
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006004:	f001 fd72 	bl	8007aec <vPortExitCritical>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006018:	f001 fd36 	bl	8007a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e001      	b.n	800602e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800602e:	f001 fd5d 	bl	8007aec <vPortExitCritical>

	return xReturn;
 8006032:	68fb      	ldr	r3, [r7, #12]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006044:	f001 fd20 	bl	8007a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e001      	b.n	800605e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f001 fd45 	bl	8007aec <vPortExitCritical>

	return xReturn;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e014      	b.n	80060a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800607c:	4a0f      	ldr	r2, [pc, #60]	@ (80060bc <vQueueAddToRegistry+0x50>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006088:	490c      	ldr	r1, [pc, #48]	@ (80060bc <vQueueAddToRegistry+0x50>)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006092:	4a0a      	ldr	r2, [pc, #40]	@ (80060bc <vQueueAddToRegistry+0x50>)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800609e:	e006      	b.n	80060ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	d9e7      	bls.n	800607c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20001394 	.word	0x20001394

080060c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e016      	b.n	80060fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80060ce:	4a10      	ldr	r2, [pc, #64]	@ (8006110 <vQueueUnregisterQueue+0x50>)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d10b      	bne.n	80060f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80060de:	4a0c      	ldr	r2, [pc, #48]	@ (8006110 <vQueueUnregisterQueue+0x50>)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2100      	movs	r1, #0
 80060e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80060e8:	4a09      	ldr	r2, [pc, #36]	@ (8006110 <vQueueUnregisterQueue+0x50>)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	2200      	movs	r2, #0
 80060f2:	605a      	str	r2, [r3, #4]
				break;
 80060f4:	e006      	b.n	8006104 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b07      	cmp	r3, #7
 8006100:	d9e5      	bls.n	80060ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20001394 	.word	0x20001394

08006114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006124:	f001 fcb0 	bl	8007a88 <vPortEnterCritical>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800612e:	b25b      	sxtb	r3, r3
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d103      	bne.n	800613e <vQueueWaitForMessageRestricted+0x2a>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006144:	b25b      	sxtb	r3, r3
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d103      	bne.n	8006154 <vQueueWaitForMessageRestricted+0x40>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006154:	f001 fcca 	bl	8007aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	3324      	adds	r3, #36	@ 0x24
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fc6d 	bl	8006a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff fefc 	bl	8005f6c <prvUnlockQueue>
	}
 8006174:	bf00      	nop
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08e      	sub	sp, #56	@ 0x38
 8006180:	af04      	add	r7, sp, #16
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800618a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	623b      	str	r3, [r7, #32]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	61fb      	str	r3, [r7, #28]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061c6:	23a8      	movs	r3, #168	@ 0xa8
 80061c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80061ce:	d00b      	beq.n	80061e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61bb      	str	r3, [r7, #24]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <xTaskCreateStatic+0xb2>
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01b      	beq.n	800622e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	2202      	movs	r2, #2
 8006204:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006208:	2300      	movs	r3, #0
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	f107 0314 	add.w	r3, r7, #20
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f851 	bl	80062c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006228:	f000 f8f6 	bl	8006418 <prvAddNewTaskToReadyList>
 800622c:	e001      	b.n	8006232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006232:	697b      	ldr	r3, [r7, #20]
	}
 8006234:	4618      	mov	r0, r3
 8006236:	3728      	adds	r7, #40	@ 0x28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	@ 0x30
 8006240:	af04      	add	r7, sp, #16
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4618      	mov	r0, r3
 8006252:	f001 fd3b 	bl	8007ccc <pvPortMalloc>
 8006256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800625e:	20a8      	movs	r0, #168	@ 0xa8
 8006260:	f001 fd34 	bl	8007ccc <pvPortMalloc>
 8006264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30
 8006272:	e005      	b.n	8006280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006274:	6978      	ldr	r0, [r7, #20]
 8006276:	f001 fdf7 	bl	8007e68 <vPortFree>
 800627a:	e001      	b.n	8006280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d017      	beq.n	80062b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	2300      	movs	r3, #0
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	9302      	str	r3, [sp, #8]
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f80f 	bl	80062c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062aa:	69f8      	ldr	r0, [r7, #28]
 80062ac:	f000 f8b4 	bl	8006418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062b0:	2301      	movs	r3, #1
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e002      	b.n	80062bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062bc:	69bb      	ldr	r3, [r7, #24]
	}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	461a      	mov	r2, r3
 80062e0:	21a5      	movs	r1, #165	@ 0xa5
 80062e2:	f001 fee1 	bl	80080a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062f0:	3b01      	subs	r3, #1
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f023 0307 	bic.w	r3, r3, #7
 80062fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	617b      	str	r3, [r7, #20]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01f      	beq.n	8006368 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	e012      	b.n	8006354 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	7819      	ldrb	r1, [r3, #0]
 8006336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	3334      	adds	r3, #52	@ 0x34
 800633e:	460a      	mov	r2, r1
 8006340:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	3301      	adds	r3, #1
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d9e9      	bls.n	800632e <prvInitialiseNewTask+0x66>
 800635a:	e000      	b.n	800635e <prvInitialiseNewTask+0x96>
			{
				break;
 800635c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006366:	e003      	b.n	8006370 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	2b37      	cmp	r3, #55	@ 0x37
 8006374:	d901      	bls.n	800637a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006376:	2337      	movs	r3, #55	@ 0x37
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006384:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	2200      	movs	r2, #0
 800638a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	3304      	adds	r3, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff f820 	bl	80053d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	3318      	adds	r3, #24
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff f81b 	bl	80053d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	3354      	adds	r3, #84	@ 0x54
 80063ca:	224c      	movs	r2, #76	@ 0x4c
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fe6a 	bl	80080a8 <memset>
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	4a0d      	ldr	r2, [pc, #52]	@ (800640c <prvInitialiseNewTask+0x144>)
 80063d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006410 <prvInitialiseNewTask+0x148>)
 80063de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006414 <prvInitialiseNewTask+0x14c>)
 80063e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	69b8      	ldr	r0, [r7, #24]
 80063ec:	f001 fa1a 	bl	8007824 <pxPortInitialiseStack>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006402:	bf00      	nop
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20005628 	.word	0x20005628
 8006410:	20005690 	.word	0x20005690
 8006414:	200056f8 	.word	0x200056f8

08006418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006420:	f001 fb32 	bl	8007a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006424:	4b2d      	ldr	r3, [pc, #180]	@ (80064dc <prvAddNewTaskToReadyList+0xc4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a2c      	ldr	r2, [pc, #176]	@ (80064dc <prvAddNewTaskToReadyList+0xc4>)
 800642c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800642e:	4b2c      	ldr	r3, [pc, #176]	@ (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006436:	4a2a      	ldr	r2, [pc, #168]	@ (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800643c:	4b27      	ldr	r3, [pc, #156]	@ (80064dc <prvAddNewTaskToReadyList+0xc4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d110      	bne.n	8006466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006444:	f000 fc2e 	bl	8006ca4 <prvInitialiseTaskLists>
 8006448:	e00d      	b.n	8006466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800644a:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <prvAddNewTaskToReadyList+0xcc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006452:	4b23      	ldr	r3, [pc, #140]	@ (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	429a      	cmp	r2, r3
 800645e:	d802      	bhi.n	8006466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006460:	4a1f      	ldr	r2, [pc, #124]	@ (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006466:	4b20      	ldr	r3, [pc, #128]	@ (80064e8 <prvAddNewTaskToReadyList+0xd0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	4a1e      	ldr	r2, [pc, #120]	@ (80064e8 <prvAddNewTaskToReadyList+0xd0>)
 800646e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006470:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <prvAddNewTaskToReadyList+0xd0>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ec <prvAddNewTaskToReadyList+0xd4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d903      	bls.n	800648c <prvAddNewTaskToReadyList+0x74>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	4a18      	ldr	r2, [pc, #96]	@ (80064ec <prvAddNewTaskToReadyList+0xd4>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <prvAddNewTaskToReadyList+0xd8>)
 800649a:	441a      	add	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3304      	adds	r3, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fe ffa4 	bl	80053f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064a8:	f001 fb20 	bl	8007aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064ac:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <prvAddNewTaskToReadyList+0xcc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00e      	beq.n	80064d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064b4:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <prvAddNewTaskToReadyList+0xc8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	429a      	cmp	r2, r3
 80064c0:	d207      	bcs.n	80064d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064c2:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <prvAddNewTaskToReadyList+0xdc>)
 80064c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200018a8 	.word	0x200018a8
 80064e0:	200013d4 	.word	0x200013d4
 80064e4:	200018b4 	.word	0x200018b4
 80064e8:	200018c4 	.word	0x200018c4
 80064ec:	200018b0 	.word	0x200018b0
 80064f0:	200013d8 	.word	0x200013d8
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800650a:	4b14      	ldr	r3, [pc, #80]	@ (800655c <vTaskDelay+0x64>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <vTaskDelay+0x32>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800652a:	f000 f88b 	bl	8006644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fd09 	bl	8006f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006536:	f000 f893 	bl	8006660 <xTaskResumeAll>
 800653a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006542:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <vTaskDelay+0x68>)
 8006544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200018d0 	.word	0x200018d0
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006572:	463a      	mov	r2, r7
 8006574:	1d39      	adds	r1, r7, #4
 8006576:	f107 0308 	add.w	r3, r7, #8
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe fe84 	bl	8005288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	9202      	str	r2, [sp, #8]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2300      	movs	r3, #0
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	460a      	mov	r2, r1
 8006592:	4924      	ldr	r1, [pc, #144]	@ (8006624 <vTaskStartScheduler+0xc0>)
 8006594:	4824      	ldr	r0, [pc, #144]	@ (8006628 <vTaskStartScheduler+0xc4>)
 8006596:	f7ff fdf1 	bl	800617c <xTaskCreateStatic>
 800659a:	4603      	mov	r3, r0
 800659c:	4a23      	ldr	r2, [pc, #140]	@ (800662c <vTaskStartScheduler+0xc8>)
 800659e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065a0:	4b22      	ldr	r3, [pc, #136]	@ (800662c <vTaskStartScheduler+0xc8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065a8:	2301      	movs	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e001      	b.n	80065b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d102      	bne.n	80065be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065b8:	f000 fd1a 	bl	8006ff0 <xTimerCreateTimerTask>
 80065bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d11b      	bne.n	80065fc <vTaskStartScheduler+0x98>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	613b      	str	r3, [r7, #16]
}
 80065d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <vTaskStartScheduler+0xcc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3354      	adds	r3, #84	@ 0x54
 80065de:	4a15      	ldr	r2, [pc, #84]	@ (8006634 <vTaskStartScheduler+0xd0>)
 80065e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065e2:	4b15      	ldr	r3, [pc, #84]	@ (8006638 <vTaskStartScheduler+0xd4>)
 80065e4:	f04f 32ff 	mov.w	r2, #4294967295
 80065e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065ea:	4b14      	ldr	r3, [pc, #80]	@ (800663c <vTaskStartScheduler+0xd8>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065f0:	4b13      	ldr	r3, [pc, #76]	@ (8006640 <vTaskStartScheduler+0xdc>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065f6:	f001 f9a3 	bl	8007940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065fa:	e00f      	b.n	800661c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d10b      	bne.n	800661c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60fb      	str	r3, [r7, #12]
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <vTaskStartScheduler+0xb4>
}
 800661c:	bf00      	nop
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	080082fc 	.word	0x080082fc
 8006628:	08006c75 	.word	0x08006c75
 800662c:	200018cc 	.word	0x200018cc
 8006630:	200013d4 	.word	0x200013d4
 8006634:	20000010 	.word	0x20000010
 8006638:	200018c8 	.word	0x200018c8
 800663c:	200018b4 	.word	0x200018b4
 8006640:	200018ac 	.word	0x200018ac

08006644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006648:	4b04      	ldr	r3, [pc, #16]	@ (800665c <vTaskSuspendAll+0x18>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	4a03      	ldr	r2, [pc, #12]	@ (800665c <vTaskSuspendAll+0x18>)
 8006650:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006652:	bf00      	nop
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	200018d0 	.word	0x200018d0

08006660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800666e:	4b42      	ldr	r3, [pc, #264]	@ (8006778 <xTaskResumeAll+0x118>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10b      	bne.n	800668e <xTaskResumeAll+0x2e>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	603b      	str	r3, [r7, #0]
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	e7fd      	b.n	800668a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800668e:	f001 f9fb 	bl	8007a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006692:	4b39      	ldr	r3, [pc, #228]	@ (8006778 <xTaskResumeAll+0x118>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3b01      	subs	r3, #1
 8006698:	4a37      	ldr	r2, [pc, #220]	@ (8006778 <xTaskResumeAll+0x118>)
 800669a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800669c:	4b36      	ldr	r3, [pc, #216]	@ (8006778 <xTaskResumeAll+0x118>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d162      	bne.n	800676a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066a4:	4b35      	ldr	r3, [pc, #212]	@ (800677c <xTaskResumeAll+0x11c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d05e      	beq.n	800676a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ac:	e02f      	b.n	800670e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ae:	4b34      	ldr	r3, [pc, #208]	@ (8006780 <xTaskResumeAll+0x120>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3318      	adds	r3, #24
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe fef5 	bl	80054aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fef0 	bl	80054aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006784 <xTaskResumeAll+0x124>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d903      	bls.n	80066de <xTaskResumeAll+0x7e>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	4a2a      	ldr	r2, [pc, #168]	@ (8006784 <xTaskResumeAll+0x124>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4a27      	ldr	r2, [pc, #156]	@ (8006788 <xTaskResumeAll+0x128>)
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fe fe7b 	bl	80053f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fe:	4b23      	ldr	r3, [pc, #140]	@ (800678c <xTaskResumeAll+0x12c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	429a      	cmp	r2, r3
 8006706:	d302      	bcc.n	800670e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006708:	4b21      	ldr	r3, [pc, #132]	@ (8006790 <xTaskResumeAll+0x130>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800670e:	4b1c      	ldr	r3, [pc, #112]	@ (8006780 <xTaskResumeAll+0x120>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1cb      	bne.n	80066ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800671c:	f000 fb66 	bl	8006dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006720:	4b1c      	ldr	r3, [pc, #112]	@ (8006794 <xTaskResumeAll+0x134>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800672c:	f000 f846 	bl	80067bc <xTaskIncrementTick>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006736:	4b16      	ldr	r3, [pc, #88]	@ (8006790 <xTaskResumeAll+0x130>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3b01      	subs	r3, #1
 8006740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f1      	bne.n	800672c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006748:	4b12      	ldr	r3, [pc, #72]	@ (8006794 <xTaskResumeAll+0x134>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800674e:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <xTaskResumeAll+0x130>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800675a:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <xTaskResumeAll+0x138>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800676a:	f001 f9bf 	bl	8007aec <vPortExitCritical>

	return xAlreadyYielded;
 800676e:	68bb      	ldr	r3, [r7, #8]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200018d0 	.word	0x200018d0
 800677c:	200018a8 	.word	0x200018a8
 8006780:	20001868 	.word	0x20001868
 8006784:	200018b0 	.word	0x200018b0
 8006788:	200013d8 	.word	0x200013d8
 800678c:	200013d4 	.word	0x200013d4
 8006790:	200018bc 	.word	0x200018bc
 8006794:	200018b8 	.word	0x200018b8
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067a2:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <xTaskGetTickCount+0x1c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067a8:	687b      	ldr	r3, [r7, #4]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	200018ac 	.word	0x200018ac

080067bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006904 <xTaskIncrementTick+0x148>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 8090 	bne.w	80068f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006908 <xTaskIncrementTick+0x14c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006908 <xTaskIncrementTick+0x14c>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d121      	bne.n	8006828 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067e4:	4b49      	ldr	r3, [pc, #292]	@ (800690c <xTaskIncrementTick+0x150>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <xTaskIncrementTick+0x4a>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	603b      	str	r3, [r7, #0]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xTaskIncrementTick+0x46>
 8006806:	4b41      	ldr	r3, [pc, #260]	@ (800690c <xTaskIncrementTick+0x150>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	4b40      	ldr	r3, [pc, #256]	@ (8006910 <xTaskIncrementTick+0x154>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a3e      	ldr	r2, [pc, #248]	@ (800690c <xTaskIncrementTick+0x150>)
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	4a3e      	ldr	r2, [pc, #248]	@ (8006910 <xTaskIncrementTick+0x154>)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	4b3e      	ldr	r3, [pc, #248]	@ (8006914 <xTaskIncrementTick+0x158>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	4a3c      	ldr	r2, [pc, #240]	@ (8006914 <xTaskIncrementTick+0x158>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	f000 fae2 	bl	8006dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006828:	4b3b      	ldr	r3, [pc, #236]	@ (8006918 <xTaskIncrementTick+0x15c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	d349      	bcc.n	80068c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006832:	4b36      	ldr	r3, [pc, #216]	@ (800690c <xTaskIncrementTick+0x150>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683c:	4b36      	ldr	r3, [pc, #216]	@ (8006918 <xTaskIncrementTick+0x15c>)
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	601a      	str	r2, [r3, #0]
					break;
 8006844:	e03f      	b.n	80068c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006846:	4b31      	ldr	r3, [pc, #196]	@ (800690c <xTaskIncrementTick+0x150>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	429a      	cmp	r2, r3
 800685c:	d203      	bcs.n	8006866 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800685e:	4a2e      	ldr	r2, [pc, #184]	@ (8006918 <xTaskIncrementTick+0x15c>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006864:	e02f      	b.n	80068c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fe1d 	bl	80054aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	3318      	adds	r3, #24
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fe14 	bl	80054aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006886:	4b25      	ldr	r3, [pc, #148]	@ (800691c <xTaskIncrementTick+0x160>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d903      	bls.n	8006896 <xTaskIncrementTick+0xda>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	4a22      	ldr	r2, [pc, #136]	@ (800691c <xTaskIncrementTick+0x160>)
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006920 <xTaskIncrementTick+0x164>)
 80068a4:	441a      	add	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f7fe fd9f 	bl	80053f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006924 <xTaskIncrementTick+0x168>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3b8      	bcc.n	8006832 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068c0:	2301      	movs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068c4:	e7b5      	b.n	8006832 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c6:	4b17      	ldr	r3, [pc, #92]	@ (8006924 <xTaskIncrementTick+0x168>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068cc:	4914      	ldr	r1, [pc, #80]	@ (8006920 <xTaskIncrementTick+0x164>)
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d901      	bls.n	80068e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068e2:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <xTaskIncrementTick+0x16c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	e004      	b.n	80068fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068f0:	4b0e      	ldr	r3, [pc, #56]	@ (800692c <xTaskIncrementTick+0x170>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3301      	adds	r3, #1
 80068f6:	4a0d      	ldr	r2, [pc, #52]	@ (800692c <xTaskIncrementTick+0x170>)
 80068f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068fa:	697b      	ldr	r3, [r7, #20]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	200018d0 	.word	0x200018d0
 8006908:	200018ac 	.word	0x200018ac
 800690c:	20001860 	.word	0x20001860
 8006910:	20001864 	.word	0x20001864
 8006914:	200018c0 	.word	0x200018c0
 8006918:	200018c8 	.word	0x200018c8
 800691c:	200018b0 	.word	0x200018b0
 8006920:	200013d8 	.word	0x200013d8
 8006924:	200013d4 	.word	0x200013d4
 8006928:	200018bc 	.word	0x200018bc
 800692c:	200018b8 	.word	0x200018b8

08006930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006936:	4b2b      	ldr	r3, [pc, #172]	@ (80069e4 <vTaskSwitchContext+0xb4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800693e:	4b2a      	ldr	r3, [pc, #168]	@ (80069e8 <vTaskSwitchContext+0xb8>)
 8006940:	2201      	movs	r2, #1
 8006942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006944:	e047      	b.n	80069d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006946:	4b28      	ldr	r3, [pc, #160]	@ (80069e8 <vTaskSwitchContext+0xb8>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694c:	4b27      	ldr	r3, [pc, #156]	@ (80069ec <vTaskSwitchContext+0xbc>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e011      	b.n	8006978 <vTaskSwitchContext+0x48>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <vTaskSwitchContext+0x42>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <vTaskSwitchContext+0x3e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b01      	subs	r3, #1
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	491d      	ldr	r1, [pc, #116]	@ (80069f0 <vTaskSwitchContext+0xc0>)
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0e3      	beq.n	8006954 <vTaskSwitchContext+0x24>
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <vTaskSwitchContext+0xc0>)
 8006998:	4413      	add	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	3308      	adds	r3, #8
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d104      	bne.n	80069bc <vTaskSwitchContext+0x8c>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	4a0c      	ldr	r2, [pc, #48]	@ (80069f4 <vTaskSwitchContext+0xc4>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <vTaskSwitchContext+0xbc>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069cc:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <vTaskSwitchContext+0xc4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3354      	adds	r3, #84	@ 0x54
 80069d2:	4a09      	ldr	r2, [pc, #36]	@ (80069f8 <vTaskSwitchContext+0xc8>)
 80069d4:	6013      	str	r3, [r2, #0]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	200018d0 	.word	0x200018d0
 80069e8:	200018bc 	.word	0x200018bc
 80069ec:	200018b0 	.word	0x200018b0
 80069f0:	200013d8 	.word	0x200013d8
 80069f4:	200013d4 	.word	0x200013d4
 80069f8:	20000010 	.word	0x20000010

080069fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60fb      	str	r3, [r7, #12]
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a24:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <vTaskPlaceOnEventList+0x48>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3318      	adds	r3, #24
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe fd03 	bl	8005438 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a32:	2101      	movs	r1, #1
 8006a34:	6838      	ldr	r0, [r7, #0]
 8006a36:	f000 fa87 	bl	8006f48 <prvAddCurrentTaskToDelayedList>
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	200013d4 	.word	0x200013d4

08006a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	617b      	str	r3, [r7, #20]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a72:	4b0a      	ldr	r3, [pc, #40]	@ (8006a9c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3318      	adds	r3, #24
 8006a78:	4619      	mov	r1, r3
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7fe fcb8 	bl	80053f0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	68b8      	ldr	r0, [r7, #8]
 8006a90:	f000 fa5a 	bl	8006f48 <prvAddCurrentTaskToDelayedList>
	}
 8006a94:	bf00      	nop
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200013d4 	.word	0x200013d4

08006aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60fb      	str	r3, [r7, #12]
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	e7fd      	b.n	8006aca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fce9 	bl	80054aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b50 <xTaskRemoveFromEventList+0xb0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11d      	bne.n	8006b1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fce0 	bl	80054aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aee:	4b19      	ldr	r3, [pc, #100]	@ (8006b54 <xTaskRemoveFromEventList+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d903      	bls.n	8006afe <xTaskRemoveFromEventList+0x5e>
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	4a16      	ldr	r2, [pc, #88]	@ (8006b54 <xTaskRemoveFromEventList+0xb4>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4a13      	ldr	r2, [pc, #76]	@ (8006b58 <xTaskRemoveFromEventList+0xb8>)
 8006b0c:	441a      	add	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7fe fc6b 	bl	80053f0 <vListInsertEnd>
 8006b1a:	e005      	b.n	8006b28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3318      	adds	r3, #24
 8006b20:	4619      	mov	r1, r3
 8006b22:	480e      	ldr	r0, [pc, #56]	@ (8006b5c <xTaskRemoveFromEventList+0xbc>)
 8006b24:	f7fe fc64 	bl	80053f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <xTaskRemoveFromEventList+0xc0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d905      	bls.n	8006b42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b36:	2301      	movs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <xTaskRemoveFromEventList+0xc4>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e001      	b.n	8006b46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b46:	697b      	ldr	r3, [r7, #20]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	200018d0 	.word	0x200018d0
 8006b54:	200018b0 	.word	0x200018b0
 8006b58:	200013d8 	.word	0x200013d8
 8006b5c:	20001868 	.word	0x20001868
 8006b60:	200013d4 	.word	0x200013d4
 8006b64:	200018bc 	.word	0x200018bc

08006b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b70:	4b06      	ldr	r3, [pc, #24]	@ (8006b8c <vTaskInternalSetTimeOutState+0x24>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b78:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <vTaskInternalSetTimeOutState+0x28>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	605a      	str	r2, [r3, #4]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	200018c0 	.word	0x200018c0
 8006b90:	200018ac 	.word	0x200018ac

08006b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	613b      	str	r3, [r7, #16]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60fb      	str	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006bda:	f000 ff55 	bl	8007a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bde:	4b1d      	ldr	r3, [pc, #116]	@ (8006c54 <xTaskCheckForTimeOut+0xc0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d102      	bne.n	8006bfe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	e023      	b.n	8006c46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b15      	ldr	r3, [pc, #84]	@ (8006c58 <xTaskCheckForTimeOut+0xc4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d007      	beq.n	8006c1a <xTaskCheckForTimeOut+0x86>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	e015      	b.n	8006c46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d20b      	bcs.n	8006c3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad2      	subs	r2, r2, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff ff99 	bl	8006b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	e004      	b.n	8006c46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c42:	2301      	movs	r3, #1
 8006c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c46:	f000 ff51 	bl	8007aec <vPortExitCritical>

	return xReturn;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	200018ac 	.word	0x200018ac
 8006c58:	200018c0 	.word	0x200018c0

08006c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c60:	4b03      	ldr	r3, [pc, #12]	@ (8006c70 <vTaskMissedYield+0x14>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
}
 8006c66:	bf00      	nop
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	200018bc 	.word	0x200018bc

08006c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c7c:	f000 f852 	bl	8006d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c80:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <prvIdleTask+0x28>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d9f9      	bls.n	8006c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c88:	4b05      	ldr	r3, [pc, #20]	@ (8006ca0 <prvIdleTask+0x2c>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c98:	e7f0      	b.n	8006c7c <prvIdleTask+0x8>
 8006c9a:	bf00      	nop
 8006c9c:	200013d8 	.word	0x200013d8
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006caa:	2300      	movs	r3, #0
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	e00c      	b.n	8006cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4a12      	ldr	r2, [pc, #72]	@ (8006d04 <prvInitialiseTaskLists+0x60>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fb69 	bl	8005396 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b37      	cmp	r3, #55	@ 0x37
 8006cce:	d9ef      	bls.n	8006cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cd0:	480d      	ldr	r0, [pc, #52]	@ (8006d08 <prvInitialiseTaskLists+0x64>)
 8006cd2:	f7fe fb60 	bl	8005396 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cd6:	480d      	ldr	r0, [pc, #52]	@ (8006d0c <prvInitialiseTaskLists+0x68>)
 8006cd8:	f7fe fb5d 	bl	8005396 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cdc:	480c      	ldr	r0, [pc, #48]	@ (8006d10 <prvInitialiseTaskLists+0x6c>)
 8006cde:	f7fe fb5a 	bl	8005396 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ce2:	480c      	ldr	r0, [pc, #48]	@ (8006d14 <prvInitialiseTaskLists+0x70>)
 8006ce4:	f7fe fb57 	bl	8005396 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ce8:	480b      	ldr	r0, [pc, #44]	@ (8006d18 <prvInitialiseTaskLists+0x74>)
 8006cea:	f7fe fb54 	bl	8005396 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cee:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <prvInitialiseTaskLists+0x78>)
 8006cf0:	4a05      	ldr	r2, [pc, #20]	@ (8006d08 <prvInitialiseTaskLists+0x64>)
 8006cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d20 <prvInitialiseTaskLists+0x7c>)
 8006cf6:	4a05      	ldr	r2, [pc, #20]	@ (8006d0c <prvInitialiseTaskLists+0x68>)
 8006cf8:	601a      	str	r2, [r3, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200013d8 	.word	0x200013d8
 8006d08:	20001838 	.word	0x20001838
 8006d0c:	2000184c 	.word	0x2000184c
 8006d10:	20001868 	.word	0x20001868
 8006d14:	2000187c 	.word	0x2000187c
 8006d18:	20001894 	.word	0x20001894
 8006d1c:	20001860 	.word	0x20001860
 8006d20:	20001864 	.word	0x20001864

08006d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d2a:	e019      	b.n	8006d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d2c:	f000 feac 	bl	8007a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d30:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <prvCheckTasksWaitingTermination+0x50>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fbb4 	bl	80054aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <prvCheckTasksWaitingTermination+0x54>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	4a0b      	ldr	r2, [pc, #44]	@ (8006d78 <prvCheckTasksWaitingTermination+0x54>)
 8006d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	4a0a      	ldr	r2, [pc, #40]	@ (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d56:	f000 fec9 	bl	8007aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f810 	bl	8006d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d60:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <prvCheckTasksWaitingTermination+0x58>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e1      	bne.n	8006d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000187c 	.word	0x2000187c
 8006d78:	200018a8 	.word	0x200018a8
 8006d7c:	20001890 	.word	0x20001890

08006d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3354      	adds	r3, #84	@ 0x54
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f993 	bl	80080b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f861 	bl	8007e68 <vPortFree>
				vPortFree( pxTCB );
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 f85e 	bl	8007e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dac:	e019      	b.n	8006de2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d103      	bne.n	8006dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f855 	bl	8007e68 <vPortFree>
	}
 8006dbe:	e010      	b.n	8006de2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d00b      	beq.n	8006de2 <prvDeleteTCB+0x62>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <prvDeleteTCB+0x5e>
	}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <prvResetNextTaskUnblockTime+0x38>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <prvResetNextTaskUnblockTime+0x3c>)
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e04:	e008      	b.n	8006e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <prvResetNextTaskUnblockTime+0x38>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvResetNextTaskUnblockTime+0x3c>)
 8006e16:	6013      	str	r3, [r2, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20001860 	.word	0x20001860
 8006e28:	200018c8 	.word	0x200018c8

08006e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e32:	4b0b      	ldr	r3, [pc, #44]	@ (8006e60 <xTaskGetSchedulerState+0x34>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	e008      	b.n	8006e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e40:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <xTaskGetSchedulerState+0x38>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	607b      	str	r3, [r7, #4]
 8006e4c:	e001      	b.n	8006e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e52:	687b      	ldr	r3, [r7, #4]
	}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	200018b4 	.word	0x200018b4
 8006e64:	200018d0 	.word	0x200018d0

08006e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d058      	beq.n	8006f30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006f3c <xTaskPriorityDisinherit+0xd4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d00b      	beq.n	8006ea0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60fb      	str	r3, [r7, #12]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10b      	bne.n	8006ec0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60bb      	str	r3, [r7, #8]
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	e7fd      	b.n	8006ebc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec4:	1e5a      	subs	r2, r3, #1
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d02c      	beq.n	8006f30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d128      	bne.n	8006f30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe fae1 	bl	80054aa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <xTaskPriorityDisinherit+0xd8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d903      	bls.n	8006f10 <xTaskPriorityDisinherit+0xa8>
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f40 <xTaskPriorityDisinherit+0xd8>)
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4a09      	ldr	r2, [pc, #36]	@ (8006f44 <xTaskPriorityDisinherit+0xdc>)
 8006f1e:	441a      	add	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7fe fa62 	bl	80053f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f30:	697b      	ldr	r3, [r7, #20]
	}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200013d4 	.word	0x200013d4
 8006f40:	200018b0 	.word	0x200018b0
 8006f44:	200013d8 	.word	0x200013d8

08006f48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f52:	4b21      	ldr	r3, [pc, #132]	@ (8006fd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f58:	4b20      	ldr	r3, [pc, #128]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe faa3 	bl	80054aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d10a      	bne.n	8006f82 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f72:	4b1a      	ldr	r3, [pc, #104]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4819      	ldr	r0, [pc, #100]	@ (8006fe0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f7c:	f7fe fa38 	bl	80053f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f80:	e026      	b.n	8006fd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f8a:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d209      	bcs.n	8006fae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9a:	4b12      	ldr	r3, [pc, #72]	@ (8006fe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f7fe fa46 	bl	8005438 <vListInsert>
}
 8006fac:	e010      	b.n	8006fd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fae:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f7fe fa3c 	bl	8005438 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d202      	bcs.n	8006fd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fca:	4a08      	ldr	r2, [pc, #32]	@ (8006fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6013      	str	r3, [r2, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	200018ac 	.word	0x200018ac
 8006fdc:	200013d4 	.word	0x200013d4
 8006fe0:	20001894 	.word	0x20001894
 8006fe4:	20001864 	.word	0x20001864
 8006fe8:	20001860 	.word	0x20001860
 8006fec:	200018c8 	.word	0x200018c8

08006ff0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	@ 0x28
 8006ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ffa:	f000 fbb1 	bl	8007760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8007074 <xTimerCreateTimerTask+0x84>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d021      	beq.n	800704a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800700e:	1d3a      	adds	r2, r7, #4
 8007010:	f107 0108 	add.w	r1, r7, #8
 8007014:	f107 030c 	add.w	r3, r7, #12
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f94f 	bl	80052bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	9202      	str	r2, [sp, #8]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	2302      	movs	r3, #2
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	2300      	movs	r3, #0
 800702e:	460a      	mov	r2, r1
 8007030:	4911      	ldr	r1, [pc, #68]	@ (8007078 <xTimerCreateTimerTask+0x88>)
 8007032:	4812      	ldr	r0, [pc, #72]	@ (800707c <xTimerCreateTimerTask+0x8c>)
 8007034:	f7ff f8a2 	bl	800617c <xTaskCreateStatic>
 8007038:	4603      	mov	r3, r0
 800703a:	4a11      	ldr	r2, [pc, #68]	@ (8007080 <xTimerCreateTimerTask+0x90>)
 800703c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <xTimerCreateTimerTask+0x90>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007046:	2301      	movs	r3, #1
 8007048:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	613b      	str	r3, [r7, #16]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007068:	697b      	ldr	r3, [r7, #20]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20001904 	.word	0x20001904
 8007078:	08008304 	.word	0x08008304
 800707c:	080072f9 	.word	0x080072f9
 8007080:	20001908 	.word	0x20001908

08007084 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007092:	202c      	movs	r0, #44	@ 0x2c
 8007094:	f000 fe1a 	bl	8007ccc <pvPortMalloc>
 8007098:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f845 	bl	8007146 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80070bc:	697b      	ldr	r3, [r7, #20]
	}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b08a      	sub	sp, #40	@ 0x28
 80070ca:	af02      	add	r7, sp, #8
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80070d4:	232c      	movs	r3, #44	@ 0x2c
 80070d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b2c      	cmp	r3, #44	@ 0x2c
 80070dc:	d00b      	beq.n	80070f6 <xTimerCreateStatic+0x30>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61bb      	str	r3, [r7, #24]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <xTimerCreateStatic+0x50>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	e7fd      	b.n	8007112 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f805 	bl	8007146 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800713c:	69fb      	ldr	r3, [r7, #28]
	}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	617b      	str	r3, [r7, #20]
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	e7fd      	b.n	800716e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01e      	beq.n	80071b6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007178:	f000 faf2 	bl	8007760 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	3304      	adds	r3, #4
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe f91c 	bl	80053d6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071aa:	f043 0304 	orr.w	r3, r3, #4
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80071b6:	bf00      	nop
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	@ 0x28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	623b      	str	r3, [r7, #32]
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	e7fd      	b.n	80071ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071f0:	4b19      	ldr	r3, [pc, #100]	@ (8007258 <xTimerGenericCommand+0x98>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d02a      	beq.n	800724e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b05      	cmp	r3, #5
 8007208:	dc18      	bgt.n	800723c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800720a:	f7ff fe0f 	bl	8006e2c <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b02      	cmp	r3, #2
 8007212:	d109      	bne.n	8007228 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007214:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <xTimerGenericCommand+0x98>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	f107 0110 	add.w	r1, r7, #16
 800721c:	2300      	movs	r3, #0
 800721e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007220:	f7fe fb6e 	bl	8005900 <xQueueGenericSend>
 8007224:	6278      	str	r0, [r7, #36]	@ 0x24
 8007226:	e012      	b.n	800724e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007228:	4b0b      	ldr	r3, [pc, #44]	@ (8007258 <xTimerGenericCommand+0x98>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	f107 0110 	add.w	r1, r7, #16
 8007230:	2300      	movs	r3, #0
 8007232:	2200      	movs	r2, #0
 8007234:	f7fe fb64 	bl	8005900 <xQueueGenericSend>
 8007238:	6278      	str	r0, [r7, #36]	@ 0x24
 800723a:	e008      	b.n	800724e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800723c:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <xTimerGenericCommand+0x98>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	f107 0110 	add.w	r1, r7, #16
 8007244:	2300      	movs	r3, #0
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	f7fe fc5c 	bl	8005b04 <xQueueGenericSendFromISR>
 800724c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007250:	4618      	mov	r0, r3
 8007252:	3728      	adds	r7, #40	@ 0x28
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20001904 	.word	0x20001904

0800725c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007266:	4b23      	ldr	r3, [pc, #140]	@ (80072f4 <prvProcessExpiredTimer+0x98>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3304      	adds	r3, #4
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe f918 	bl	80054aa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d023      	beq.n	80072d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	699a      	ldr	r2, [r3, #24]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	18d1      	adds	r1, r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	6978      	ldr	r0, [r7, #20]
 8007296:	f000 f8d5 	bl	8007444 <prvInsertTimerInActiveList>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d020      	beq.n	80072e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a0:	2300      	movs	r3, #0
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	2100      	movs	r1, #0
 80072aa:	6978      	ldr	r0, [r7, #20]
 80072ac:	f7ff ff88 	bl	80071c0 <xTimerGenericCommand>
 80072b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d114      	bne.n	80072e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	60fb      	str	r3, [r7, #12]
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	e7fd      	b.n	80072cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072d6:	f023 0301 	bic.w	r3, r3, #1
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	4798      	blx	r3
}
 80072ea:	bf00      	nop
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200018fc 	.word	0x200018fc

080072f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007300:	f107 0308 	add.w	r3, r7, #8
 8007304:	4618      	mov	r0, r3
 8007306:	f000 f859 	bl	80073bc <prvGetNextExpireTime>
 800730a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4619      	mov	r1, r3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f805 	bl	8007320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007316:	f000 f8d7 	bl	80074c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800731a:	bf00      	nop
 800731c:	e7f0      	b.n	8007300 <prvTimerTask+0x8>
	...

08007320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800732a:	f7ff f98b 	bl	8006644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800732e:	f107 0308 	add.w	r3, r7, #8
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f866 	bl	8007404 <prvSampleTimeNow>
 8007338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d130      	bne.n	80073a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <prvProcessTimerOrBlockTask+0x3c>
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	429a      	cmp	r2, r3
 800734c:	d806      	bhi.n	800735c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800734e:	f7ff f987 	bl	8006660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff ff81 	bl	800725c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800735a:	e024      	b.n	80073a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007362:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <prvProcessTimerOrBlockTask+0x90>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <prvProcessTimerOrBlockTask+0x50>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <prvProcessTimerOrBlockTask+0x52>
 8007370:	2300      	movs	r3, #0
 8007372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007374:	4b0f      	ldr	r3, [pc, #60]	@ (80073b4 <prvProcessTimerOrBlockTask+0x94>)
 8007376:	6818      	ldr	r0, [r3, #0]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4619      	mov	r1, r3
 8007382:	f7fe fec7 	bl	8006114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007386:	f7ff f96b 	bl	8006660 <xTaskResumeAll>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007390:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <prvProcessTimerOrBlockTask+0x98>)
 8007392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
}
 80073a0:	e001      	b.n	80073a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073a2:	f7ff f95d 	bl	8006660 <xTaskResumeAll>
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20001900 	.word	0x20001900
 80073b4:	20001904 	.word	0x20001904
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007400 <prvGetNextExpireTime+0x44>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <prvGetNextExpireTime+0x16>
 80073ce:	2201      	movs	r2, #1
 80073d0:	e000      	b.n	80073d4 <prvGetNextExpireTime+0x18>
 80073d2:	2200      	movs	r2, #0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073e0:	4b07      	ldr	r3, [pc, #28]	@ (8007400 <prvGetNextExpireTime+0x44>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	e001      	b.n	80073f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	200018fc 	.word	0x200018fc

08007404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800740c:	f7ff f9c6 	bl	800679c <xTaskGetTickCount>
 8007410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007412:	4b0b      	ldr	r3, [pc, #44]	@ (8007440 <prvSampleTimeNow+0x3c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	429a      	cmp	r2, r3
 800741a:	d205      	bcs.n	8007428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800741c:	f000 f93a 	bl	8007694 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e002      	b.n	800742e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800742e:	4a04      	ldr	r2, [pc, #16]	@ (8007440 <prvSampleTimeNow+0x3c>)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007434:	68fb      	ldr	r3, [r7, #12]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	2000190c 	.word	0x2000190c

08007444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d812      	bhi.n	8007490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	429a      	cmp	r2, r3
 8007476:	d302      	bcc.n	800747e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e01b      	b.n	80074b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800747e:	4b10      	ldr	r3, [pc, #64]	@ (80074c0 <prvInsertTimerInActiveList+0x7c>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fd ffd5 	bl	8005438 <vListInsert>
 800748e:	e012      	b.n	80074b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d206      	bcs.n	80074a6 <prvInsertTimerInActiveList+0x62>
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d302      	bcc.n	80074a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e007      	b.n	80074b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074a6:	4b07      	ldr	r3, [pc, #28]	@ (80074c4 <prvInsertTimerInActiveList+0x80>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f7fd ffc1 	bl	8005438 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074b6:	697b      	ldr	r3, [r7, #20]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20001900 	.word	0x20001900
 80074c4:	200018fc 	.word	0x200018fc

080074c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	@ 0x38
 80074cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ce:	e0ce      	b.n	800766e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da19      	bge.n	800750a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074d6:	1d3b      	adds	r3, r7, #4
 80074d8:	3304      	adds	r3, #4
 80074da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	61fb      	str	r3, [r7, #28]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007500:	6850      	ldr	r0, [r2, #4]
 8007502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007504:	6892      	ldr	r2, [r2, #8]
 8007506:	4611      	mov	r1, r2
 8007508:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f2c0 80ae 	blt.w	800766e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	3304      	adds	r3, #4
 8007522:	4618      	mov	r0, r3
 8007524:	f7fd ffc1 	bl	80054aa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007528:	463b      	mov	r3, r7
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff ff6a 	bl	8007404 <prvSampleTimeNow>
 8007530:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b09      	cmp	r3, #9
 8007536:	f200 8097 	bhi.w	8007668 <prvProcessReceivedCommands+0x1a0>
 800753a:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <prvProcessReceivedCommands+0x78>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	08007569 	.word	0x08007569
 8007544:	08007569 	.word	0x08007569
 8007548:	08007569 	.word	0x08007569
 800754c:	080075df 	.word	0x080075df
 8007550:	080075f3 	.word	0x080075f3
 8007554:	0800763f 	.word	0x0800763f
 8007558:	08007569 	.word	0x08007569
 800755c:	08007569 	.word	0x08007569
 8007560:	080075df 	.word	0x080075df
 8007564:	080075f3 	.word	0x080075f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	b2da      	uxtb	r2, r3
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	18d1      	adds	r1, r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007588:	f7ff ff5c 	bl	8007444 <prvInsertTimerInActiveList>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d06c      	beq.n	800766c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007598:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d061      	beq.n	800766c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	441a      	add	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ba:	f7ff fe01 	bl	80071c0 <xTimerGenericCommand>
 80075be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d152      	bne.n	800766c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	61bb      	str	r3, [r7, #24]
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075f0:	e03d      	b.n	800766e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007608:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10b      	bne.n	800762a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	617b      	str	r3, [r7, #20]
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	e7fd      	b.n	8007626 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	18d1      	adds	r1, r2, r3
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007638:	f7ff ff04 	bl	8007444 <prvInsertTimerInActiveList>
					break;
 800763c:	e017      	b.n	800766e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800764c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800764e:	f000 fc0b 	bl	8007e68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007652:	e00c      	b.n	800766e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007666:	e002      	b.n	800766e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <prvProcessReceivedCommands+0x1a6>
					break;
 800766c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800766e:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <prvProcessReceivedCommands+0x1c8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	1d39      	adds	r1, r7, #4
 8007674:	2200      	movs	r2, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fae2 	bl	8005c40 <xQueueReceive>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	f47f af26 	bne.w	80074d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	3730      	adds	r7, #48	@ 0x30
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20001904 	.word	0x20001904

08007694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800769a:	e049      	b.n	8007730 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800769c:	4b2e      	ldr	r3, [pc, #184]	@ (8007758 <prvSwitchTimerLists+0xc4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007758 <prvSwitchTimerLists+0xc4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd fef8 	bl	80054aa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02f      	beq.n	8007730 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4413      	add	r3, r2
 80076d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d90e      	bls.n	8007700 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007758 <prvSwitchTimerLists+0xc4>)
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f7fd fe9d 	bl	8005438 <vListInsert>
 80076fe:	e017      	b.n	8007730 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007700:	2300      	movs	r3, #0
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	2100      	movs	r1, #0
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fd58 	bl	80071c0 <xTimerGenericCommand>
 8007710:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10b      	bne.n	8007730 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	603b      	str	r3, [r7, #0]
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	e7fd      	b.n	800772c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007730:	4b09      	ldr	r3, [pc, #36]	@ (8007758 <prvSwitchTimerLists+0xc4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1b0      	bne.n	800769c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800773a:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <prvSwitchTimerLists+0xc4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007740:	4b06      	ldr	r3, [pc, #24]	@ (800775c <prvSwitchTimerLists+0xc8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <prvSwitchTimerLists+0xc4>)
 8007746:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007748:	4a04      	ldr	r2, [pc, #16]	@ (800775c <prvSwitchTimerLists+0xc8>)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6013      	str	r3, [r2, #0]
}
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200018fc 	.word	0x200018fc
 800775c:	20001900 	.word	0x20001900

08007760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007766:	f000 f98f 	bl	8007a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800776a:	4b15      	ldr	r3, [pc, #84]	@ (80077c0 <prvCheckForValidListAndQueue+0x60>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d120      	bne.n	80077b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007772:	4814      	ldr	r0, [pc, #80]	@ (80077c4 <prvCheckForValidListAndQueue+0x64>)
 8007774:	f7fd fe0f 	bl	8005396 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007778:	4813      	ldr	r0, [pc, #76]	@ (80077c8 <prvCheckForValidListAndQueue+0x68>)
 800777a:	f7fd fe0c 	bl	8005396 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800777e:	4b13      	ldr	r3, [pc, #76]	@ (80077cc <prvCheckForValidListAndQueue+0x6c>)
 8007780:	4a10      	ldr	r2, [pc, #64]	@ (80077c4 <prvCheckForValidListAndQueue+0x64>)
 8007782:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007784:	4b12      	ldr	r3, [pc, #72]	@ (80077d0 <prvCheckForValidListAndQueue+0x70>)
 8007786:	4a10      	ldr	r2, [pc, #64]	@ (80077c8 <prvCheckForValidListAndQueue+0x68>)
 8007788:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800778a:	2300      	movs	r3, #0
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4b11      	ldr	r3, [pc, #68]	@ (80077d4 <prvCheckForValidListAndQueue+0x74>)
 8007790:	4a11      	ldr	r2, [pc, #68]	@ (80077d8 <prvCheckForValidListAndQueue+0x78>)
 8007792:	2110      	movs	r1, #16
 8007794:	200a      	movs	r0, #10
 8007796:	f7fd ff1d 	bl	80055d4 <xQueueGenericCreateStatic>
 800779a:	4603      	mov	r3, r0
 800779c:	4a08      	ldr	r2, [pc, #32]	@ (80077c0 <prvCheckForValidListAndQueue+0x60>)
 800779e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077a0:	4b07      	ldr	r3, [pc, #28]	@ (80077c0 <prvCheckForValidListAndQueue+0x60>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077a8:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <prvCheckForValidListAndQueue+0x60>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	490b      	ldr	r1, [pc, #44]	@ (80077dc <prvCheckForValidListAndQueue+0x7c>)
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fc5c 	bl	800606c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077b4:	f000 f99a 	bl	8007aec <vPortExitCritical>
}
 80077b8:	bf00      	nop
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20001904 	.word	0x20001904
 80077c4:	200018d4 	.word	0x200018d4
 80077c8:	200018e8 	.word	0x200018e8
 80077cc:	200018fc 	.word	0x200018fc
 80077d0:	20001900 	.word	0x20001900
 80077d4:	200019b0 	.word	0x200019b0
 80077d8:	20001910 	.word	0x20001910
 80077dc:	0800830c 	.word	0x0800830c

080077e0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <pvTimerGetTimerID+0x2a>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60fb      	str	r3, [r7, #12]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800780a:	f000 f93d 	bl	8007a88 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007814:	f000 f96a 	bl	8007aec <vPortExitCritical>

	return pvReturn;
 8007818:	693b      	ldr	r3, [r7, #16]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3b04      	subs	r3, #4
 8007834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800783c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b04      	subs	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f023 0201 	bic.w	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3b04      	subs	r3, #4
 8007852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007854:	4a0c      	ldr	r2, [pc, #48]	@ (8007888 <pxPortInitialiseStack+0x64>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3b14      	subs	r3, #20
 800785e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b04      	subs	r3, #4
 800786a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f06f 0202 	mvn.w	r2, #2
 8007872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3b20      	subs	r3, #32
 8007878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800787a:	68fb      	ldr	r3, [r7, #12]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	0800788d 	.word	0x0800788d

0800788c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007896:	4b13      	ldr	r3, [pc, #76]	@ (80078e4 <prvTaskExitError+0x58>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789e:	d00b      	beq.n	80078b8 <prvTaskExitError+0x2c>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <prvTaskExitError+0x28>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	60bb      	str	r3, [r7, #8]
}
 80078ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078cc:	bf00      	nop
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0fc      	beq.n	80078ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	2000000c 	.word	0x2000000c
	...

080078f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078f0:	4b07      	ldr	r3, [pc, #28]	@ (8007910 <pxCurrentTCBConst2>)
 80078f2:	6819      	ldr	r1, [r3, #0]
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	f380 8809 	msr	PSP, r0
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8811 	msr	BASEPRI, r0
 800790a:	4770      	bx	lr
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst2>:
 8007910:	200013d4 	.word	0x200013d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007918:	4808      	ldr	r0, [pc, #32]	@ (800793c <prvPortStartFirstTask+0x24>)
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f380 8808 	msr	MSP, r0
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8814 	msr	CONTROL, r0
 800792a:	b662      	cpsie	i
 800792c:	b661      	cpsie	f
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	df00      	svc	0
 8007938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800793a:	bf00      	nop
 800793c:	e000ed08 	.word	0xe000ed08

08007940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007946:	4b47      	ldr	r3, [pc, #284]	@ (8007a64 <xPortStartScheduler+0x124>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a47      	ldr	r2, [pc, #284]	@ (8007a68 <xPortStartScheduler+0x128>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10b      	bne.n	8007968 <xPortStartScheduler+0x28>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007968:	4b3e      	ldr	r3, [pc, #248]	@ (8007a64 <xPortStartScheduler+0x124>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a6c <xPortStartScheduler+0x12c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10b      	bne.n	800798a <xPortStartScheduler+0x4a>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	60fb      	str	r3, [r7, #12]
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	e7fd      	b.n	8007986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800798a:	4b39      	ldr	r3, [pc, #228]	@ (8007a70 <xPortStartScheduler+0x130>)
 800798c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	22ff      	movs	r2, #255	@ 0xff
 800799a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	4b31      	ldr	r3, [pc, #196]	@ (8007a74 <xPortStartScheduler+0x134>)
 80079b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079b2:	4b31      	ldr	r3, [pc, #196]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079b4:	2207      	movs	r2, #7
 80079b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b8:	e009      	b.n	80079ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80079ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3b01      	subs	r3, #1
 80079c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d6:	2b80      	cmp	r3, #128	@ 0x80
 80079d8:	d0ef      	beq.n	80079ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079da:	4b27      	ldr	r3, [pc, #156]	@ (8007a78 <xPortStartScheduler+0x138>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f1c3 0307 	rsb	r3, r3, #7
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00b      	beq.n	80079fe <xPortStartScheduler+0xbe>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	60bb      	str	r3, [r7, #8]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	4a1c      	ldr	r2, [pc, #112]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a08:	4b1b      	ldr	r3, [pc, #108]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a10:	4a19      	ldr	r2, [pc, #100]	@ (8007a78 <xPortStartScheduler+0x138>)
 8007a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a1c:	4b17      	ldr	r3, [pc, #92]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a16      	ldr	r2, [pc, #88]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a28:	4b14      	ldr	r3, [pc, #80]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a13      	ldr	r2, [pc, #76]	@ (8007a7c <xPortStartScheduler+0x13c>)
 8007a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a34:	f000 f8da 	bl	8007bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a38:	4b11      	ldr	r3, [pc, #68]	@ (8007a80 <xPortStartScheduler+0x140>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a3e:	f000 f8f9 	bl	8007c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <xPortStartScheduler+0x144>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a0f      	ldr	r2, [pc, #60]	@ (8007a84 <xPortStartScheduler+0x144>)
 8007a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a4e:	f7ff ff63 	bl	8007918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a52:	f7fe ff6d 	bl	8006930 <vTaskSwitchContext>
	prvTaskExitError();
 8007a56:	f7ff ff19 	bl	800788c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	e000ed00 	.word	0xe000ed00
 8007a68:	410fc271 	.word	0x410fc271
 8007a6c:	410fc270 	.word	0x410fc270
 8007a70:	e000e400 	.word	0xe000e400
 8007a74:	20001a00 	.word	0x20001a00
 8007a78:	20001a04 	.word	0x20001a04
 8007a7c:	e000ed20 	.word	0xe000ed20
 8007a80:	2000000c 	.word	0x2000000c
 8007a84:	e000ef34 	.word	0xe000ef34

08007a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007aa2:	4b10      	ldr	r3, [pc, #64]	@ (8007ae4 <vPortEnterCritical+0x5c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae4 <vPortEnterCritical+0x5c>)
 8007aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <vPortEnterCritical+0x5c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d110      	bne.n	8007ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <vPortEnterCritical+0x60>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00b      	beq.n	8007ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	603b      	str	r3, [r7, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	e7fd      	b.n	8007ad2 <vPortEnterCritical+0x4a>
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	2000000c 	.word	0x2000000c
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007af2:	4b12      	ldr	r3, [pc, #72]	@ (8007b3c <vPortExitCritical+0x50>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <vPortExitCritical+0x26>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	607b      	str	r3, [r7, #4]
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	e7fd      	b.n	8007b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b12:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <vPortExitCritical+0x50>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4a08      	ldr	r2, [pc, #32]	@ (8007b3c <vPortExitCritical+0x50>)
 8007b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b1c:	4b07      	ldr	r3, [pc, #28]	@ (8007b3c <vPortExitCritical+0x50>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <vPortExitCritical+0x44>
 8007b24:	2300      	movs	r3, #0
 8007b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f383 8811 	msr	BASEPRI, r3
}
 8007b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	2000000c 	.word	0x2000000c

08007b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b40:	f3ef 8009 	mrs	r0, PSP
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4b15      	ldr	r3, [pc, #84]	@ (8007ba0 <pxCurrentTCBConst>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f01e 0f10 	tst.w	lr, #16
 8007b50:	bf08      	it	eq
 8007b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b64:	f380 8811 	msr	BASEPRI, r0
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f7fe fede 	bl	8006930 <vTaskSwitchContext>
 8007b74:	f04f 0000 	mov.w	r0, #0
 8007b78:	f380 8811 	msr	BASEPRI, r0
 8007b7c:	bc09      	pop	{r0, r3}
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	6808      	ldr	r0, [r1, #0]
 8007b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b86:	f01e 0f10 	tst.w	lr, #16
 8007b8a:	bf08      	it	eq
 8007b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b90:	f380 8809 	msr	PSP, r0
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst>:
 8007ba0:	200013d4 	.word	0x200013d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bc2:	f7fe fdfb 	bl	80067bc <xTaskIncrementTick>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <xPortSysTickHandler+0x40>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f383 8811 	msr	BASEPRI, r3
}
 8007bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c24 <vPortSetupTimerInterrupt+0x38>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <vPortSetupTimerInterrupt+0x3c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	@ (8007c2c <vPortSetupTimerInterrupt+0x40>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	4a09      	ldr	r2, [pc, #36]	@ (8007c30 <vPortSetupTimerInterrupt+0x44>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c0e:	4b04      	ldr	r3, [pc, #16]	@ (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010
 8007c24:	e000e018 	.word	0xe000e018
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	e000e014 	.word	0xe000e014

08007c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c44 <vPortEnableVFP+0x10>
 8007c38:	6801      	ldr	r1, [r0, #0]
 8007c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c3e:	6001      	str	r1, [r0, #0]
 8007c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c42:	bf00      	nop
 8007c44:	e000ed88 	.word	0xe000ed88

08007c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d915      	bls.n	8007c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c5a:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <vPortValidateInterruptPriority+0x74>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c64:	4b16      	ldr	r3, [pc, #88]	@ (8007cc0 <vPortValidateInterruptPriority+0x78>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d20b      	bcs.n	8007c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c86:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc4 <vPortValidateInterruptPriority+0x7c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc8 <vPortValidateInterruptPriority+0x80>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d90b      	bls.n	8007cae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	603b      	str	r3, [r7, #0]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <vPortValidateInterruptPriority+0x62>
	}
 8007cae:	bf00      	nop
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	e000e3f0 	.word	0xe000e3f0
 8007cc0:	20001a00 	.word	0x20001a00
 8007cc4:	e000ed0c 	.word	0xe000ed0c
 8007cc8:	20001a04 	.word	0x20001a04

08007ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08a      	sub	sp, #40	@ 0x28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cd8:	f7fe fcb4 	bl	8006644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8007e50 <pvPortMalloc+0x184>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ce4:	f000 f924 	bl	8007f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e54 <pvPortMalloc+0x188>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 8095 	bne.w	8007e20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01e      	beq.n	8007d3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4413      	add	r3, r2
 8007d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d015      	beq.n	8007d3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f023 0307 	bic.w	r3, r3, #7
 8007d14:	3308      	adds	r3, #8
 8007d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <pvPortMalloc+0x6e>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	617b      	str	r3, [r7, #20]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d06f      	beq.n	8007e20 <pvPortMalloc+0x154>
 8007d40:	4b45      	ldr	r3, [pc, #276]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d86a      	bhi.n	8007e20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d4a:	4b44      	ldr	r3, [pc, #272]	@ (8007e5c <pvPortMalloc+0x190>)
 8007d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d4e:	4b43      	ldr	r3, [pc, #268]	@ (8007e5c <pvPortMalloc+0x190>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d54:	e004      	b.n	8007d60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <pvPortMalloc+0xa6>
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f1      	bne.n	8007d56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d72:	4b37      	ldr	r3, [pc, #220]	@ (8007e50 <pvPortMalloc+0x184>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d051      	beq.n	8007e20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2208      	movs	r2, #8
 8007d82:	4413      	add	r3, r2
 8007d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	2308      	movs	r3, #8
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d920      	bls.n	8007de0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <pvPortMalloc+0xfc>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dda:	69b8      	ldr	r0, [r7, #24]
 8007ddc:	f000 f90a 	bl	8007ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007de0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	4a1b      	ldr	r2, [pc, #108]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dee:	4b1a      	ldr	r3, [pc, #104]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <pvPortMalloc+0x194>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d203      	bcs.n	8007e02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dfa:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <pvPortMalloc+0x18c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a18      	ldr	r2, [pc, #96]	@ (8007e60 <pvPortMalloc+0x194>)
 8007e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <pvPortMalloc+0x188>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e16:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <pvPortMalloc+0x198>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	4a11      	ldr	r2, [pc, #68]	@ (8007e64 <pvPortMalloc+0x198>)
 8007e1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e20:	f7fe fc1e 	bl	8006660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <pvPortMalloc+0x17a>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	e7fd      	b.n	8007e42 <pvPortMalloc+0x176>
	return pvReturn;
 8007e46:	69fb      	ldr	r3, [r7, #28]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3728      	adds	r7, #40	@ 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20005610 	.word	0x20005610
 8007e54:	20005624 	.word	0x20005624
 8007e58:	20005614 	.word	0x20005614
 8007e5c:	20005608 	.word	0x20005608
 8007e60:	20005618 	.word	0x20005618
 8007e64:	2000561c 	.word	0x2000561c

08007e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d04f      	beq.n	8007f1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	425b      	negs	r3, r3
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4413      	add	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4b25      	ldr	r3, [pc, #148]	@ (8007f24 <vPortFree+0xbc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10b      	bne.n	8007eae <vPortFree+0x46>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	60fb      	str	r3, [r7, #12]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00b      	beq.n	8007ece <vPortFree+0x66>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60bb      	str	r3, [r7, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	4b14      	ldr	r3, [pc, #80]	@ (8007f24 <vPortFree+0xbc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d11a      	bne.n	8007f1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f24 <vPortFree+0xbc>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	401a      	ands	r2, r3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ef4:	f7fe fba6 	bl	8006644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <vPortFree+0xc0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4413      	add	r3, r2
 8007f02:	4a09      	ldr	r2, [pc, #36]	@ (8007f28 <vPortFree+0xc0>)
 8007f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f000 f874 	bl	8007ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f0c:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <vPortFree+0xc4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	4a06      	ldr	r2, [pc, #24]	@ (8007f2c <vPortFree+0xc4>)
 8007f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f16:	f7fe fba3 	bl	8006660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20005624 	.word	0x20005624
 8007f28:	20005614 	.word	0x20005614
 8007f2c:	20005620 	.word	0x20005620

08007f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f3c:	4b27      	ldr	r3, [pc, #156]	@ (8007fdc <prvHeapInit+0xac>)
 8007f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00c      	beq.n	8007f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3307      	adds	r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0307 	bic.w	r3, r3, #7
 8007f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fdc <prvHeapInit+0xac>)
 8007f60:	4413      	add	r3, r2
 8007f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f68:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe0 <prvHeapInit+0xb0>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe0 <prvHeapInit+0xb0>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	4413      	add	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0307 	bic.w	r3, r3, #7
 8007f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a15      	ldr	r2, [pc, #84]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f92:	4b14      	ldr	r3, [pc, #80]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f9a:	4b12      	ldr	r3, [pc, #72]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <prvHeapInit+0xb4>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe8 <prvHeapInit+0xb8>)
 8007fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	4a09      	ldr	r2, [pc, #36]	@ (8007fec <prvHeapInit+0xbc>)
 8007fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fc8:	4b09      	ldr	r3, [pc, #36]	@ (8007ff0 <prvHeapInit+0xc0>)
 8007fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fce:	601a      	str	r2, [r3, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20001a08 	.word	0x20001a08
 8007fe0:	20005608 	.word	0x20005608
 8007fe4:	20005610 	.word	0x20005610
 8007fe8:	20005618 	.word	0x20005618
 8007fec:	20005614 	.word	0x20005614
 8007ff0:	20005624 	.word	0x20005624

08007ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ffc:	4b28      	ldr	r3, [pc, #160]	@ (80080a0 <prvInsertBlockIntoFreeList+0xac>)
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e002      	b.n	8008008 <prvInsertBlockIntoFreeList+0x14>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d8f7      	bhi.n	8008002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d108      	bne.n	8008036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	441a      	add	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	429a      	cmp	r2, r3
 8008048:	d118      	bne.n	800807c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4b15      	ldr	r3, [pc, #84]	@ (80080a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d00d      	beq.n	8008072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	441a      	add	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	e008      	b.n	8008084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008072:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e003      	b.n	8008084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d002      	beq.n	8008092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20005608 	.word	0x20005608
 80080a4:	20005610 	.word	0x20005610

080080a8 <memset>:
 80080a8:	4402      	add	r2, r0
 80080aa:	4603      	mov	r3, r0
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d100      	bne.n	80080b2 <memset+0xa>
 80080b0:	4770      	bx	lr
 80080b2:	f803 1b01 	strb.w	r1, [r3], #1
 80080b6:	e7f9      	b.n	80080ac <memset+0x4>

080080b8 <_reclaim_reent>:
 80080b8:	4b29      	ldr	r3, [pc, #164]	@ (8008160 <_reclaim_reent+0xa8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4283      	cmp	r3, r0
 80080be:	b570      	push	{r4, r5, r6, lr}
 80080c0:	4604      	mov	r4, r0
 80080c2:	d04b      	beq.n	800815c <_reclaim_reent+0xa4>
 80080c4:	69c3      	ldr	r3, [r0, #28]
 80080c6:	b1ab      	cbz	r3, 80080f4 <_reclaim_reent+0x3c>
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	b16b      	cbz	r3, 80080e8 <_reclaim_reent+0x30>
 80080cc:	2500      	movs	r5, #0
 80080ce:	69e3      	ldr	r3, [r4, #28]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	5959      	ldr	r1, [r3, r5]
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d13b      	bne.n	8008150 <_reclaim_reent+0x98>
 80080d8:	3504      	adds	r5, #4
 80080da:	2d80      	cmp	r5, #128	@ 0x80
 80080dc:	d1f7      	bne.n	80080ce <_reclaim_reent+0x16>
 80080de:	69e3      	ldr	r3, [r4, #28]
 80080e0:	4620      	mov	r0, r4
 80080e2:	68d9      	ldr	r1, [r3, #12]
 80080e4:	f000 f872 	bl	80081cc <_free_r>
 80080e8:	69e3      	ldr	r3, [r4, #28]
 80080ea:	6819      	ldr	r1, [r3, #0]
 80080ec:	b111      	cbz	r1, 80080f4 <_reclaim_reent+0x3c>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 f86c 	bl	80081cc <_free_r>
 80080f4:	6961      	ldr	r1, [r4, #20]
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x46>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f867 	bl	80081cc <_free_r>
 80080fe:	69e1      	ldr	r1, [r4, #28]
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x50>
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f862 	bl	80081cc <_free_r>
 8008108:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x5a>
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f85d 	bl	80081cc <_free_r>
 8008112:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008114:	b111      	cbz	r1, 800811c <_reclaim_reent+0x64>
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f858 	bl	80081cc <_free_r>
 800811c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x6e>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f853 	bl	80081cc <_free_r>
 8008126:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x78>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f84e 	bl	80081cc <_free_r>
 8008130:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x82>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f849 	bl	80081cc <_free_r>
 800813a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800813c:	b111      	cbz	r1, 8008144 <_reclaim_reent+0x8c>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f844 	bl	80081cc <_free_r>
 8008144:	6a23      	ldr	r3, [r4, #32]
 8008146:	b14b      	cbz	r3, 800815c <_reclaim_reent+0xa4>
 8008148:	4620      	mov	r0, r4
 800814a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800814e:	4718      	bx	r3
 8008150:	680e      	ldr	r6, [r1, #0]
 8008152:	4620      	mov	r0, r4
 8008154:	f000 f83a 	bl	80081cc <_free_r>
 8008158:	4631      	mov	r1, r6
 800815a:	e7bb      	b.n	80080d4 <_reclaim_reent+0x1c>
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	bf00      	nop
 8008160:	20000010 	.word	0x20000010

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	4d0d      	ldr	r5, [pc, #52]	@ (800819c <__libc_init_array+0x38>)
 8008168:	4c0d      	ldr	r4, [pc, #52]	@ (80081a0 <__libc_init_array+0x3c>)
 800816a:	1b64      	subs	r4, r4, r5
 800816c:	10a4      	asrs	r4, r4, #2
 800816e:	2600      	movs	r6, #0
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	4d0b      	ldr	r5, [pc, #44]	@ (80081a4 <__libc_init_array+0x40>)
 8008176:	4c0c      	ldr	r4, [pc, #48]	@ (80081a8 <__libc_init_array+0x44>)
 8008178:	f000 f87e 	bl	8008278 <_init>
 800817c:	1b64      	subs	r4, r4, r5
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	2600      	movs	r6, #0
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	080083f8 	.word	0x080083f8
 80081a0:	080083f8 	.word	0x080083f8
 80081a4:	080083f8 	.word	0x080083f8
 80081a8:	080083fc 	.word	0x080083fc

080081ac <__retarget_lock_acquire_recursive>:
 80081ac:	4770      	bx	lr

080081ae <__retarget_lock_release_recursive>:
 80081ae:	4770      	bx	lr

080081b0 <memcpy>:
 80081b0:	440a      	add	r2, r1
 80081b2:	4291      	cmp	r1, r2
 80081b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b8:	d100      	bne.n	80081bc <memcpy+0xc>
 80081ba:	4770      	bx	lr
 80081bc:	b510      	push	{r4, lr}
 80081be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c6:	4291      	cmp	r1, r2
 80081c8:	d1f9      	bne.n	80081be <memcpy+0xe>
 80081ca:	bd10      	pop	{r4, pc}

080081cc <_free_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4605      	mov	r5, r0
 80081d0:	2900      	cmp	r1, #0
 80081d2:	d041      	beq.n	8008258 <_free_r+0x8c>
 80081d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d8:	1f0c      	subs	r4, r1, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bfb8      	it	lt
 80081de:	18e4      	addlt	r4, r4, r3
 80081e0:	f000 f83e 	bl	8008260 <__malloc_lock>
 80081e4:	4a1d      	ldr	r2, [pc, #116]	@ (800825c <_free_r+0x90>)
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	b933      	cbnz	r3, 80081f8 <_free_r+0x2c>
 80081ea:	6063      	str	r3, [r4, #4]
 80081ec:	6014      	str	r4, [r2, #0]
 80081ee:	4628      	mov	r0, r5
 80081f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081f4:	f000 b83a 	b.w	800826c <__malloc_unlock>
 80081f8:	42a3      	cmp	r3, r4
 80081fa:	d908      	bls.n	800820e <_free_r+0x42>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	1821      	adds	r1, r4, r0
 8008200:	428b      	cmp	r3, r1
 8008202:	bf01      	itttt	eq
 8008204:	6819      	ldreq	r1, [r3, #0]
 8008206:	685b      	ldreq	r3, [r3, #4]
 8008208:	1809      	addeq	r1, r1, r0
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	e7ed      	b.n	80081ea <_free_r+0x1e>
 800820e:	461a      	mov	r2, r3
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	b10b      	cbz	r3, 8008218 <_free_r+0x4c>
 8008214:	42a3      	cmp	r3, r4
 8008216:	d9fa      	bls.n	800820e <_free_r+0x42>
 8008218:	6811      	ldr	r1, [r2, #0]
 800821a:	1850      	adds	r0, r2, r1
 800821c:	42a0      	cmp	r0, r4
 800821e:	d10b      	bne.n	8008238 <_free_r+0x6c>
 8008220:	6820      	ldr	r0, [r4, #0]
 8008222:	4401      	add	r1, r0
 8008224:	1850      	adds	r0, r2, r1
 8008226:	4283      	cmp	r3, r0
 8008228:	6011      	str	r1, [r2, #0]
 800822a:	d1e0      	bne.n	80081ee <_free_r+0x22>
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	6053      	str	r3, [r2, #4]
 8008232:	4408      	add	r0, r1
 8008234:	6010      	str	r0, [r2, #0]
 8008236:	e7da      	b.n	80081ee <_free_r+0x22>
 8008238:	d902      	bls.n	8008240 <_free_r+0x74>
 800823a:	230c      	movs	r3, #12
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	e7d6      	b.n	80081ee <_free_r+0x22>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	1821      	adds	r1, r4, r0
 8008244:	428b      	cmp	r3, r1
 8008246:	bf04      	itt	eq
 8008248:	6819      	ldreq	r1, [r3, #0]
 800824a:	685b      	ldreq	r3, [r3, #4]
 800824c:	6063      	str	r3, [r4, #4]
 800824e:	bf04      	itt	eq
 8008250:	1809      	addeq	r1, r1, r0
 8008252:	6021      	streq	r1, [r4, #0]
 8008254:	6054      	str	r4, [r2, #4]
 8008256:	e7ca      	b.n	80081ee <_free_r+0x22>
 8008258:	bd38      	pop	{r3, r4, r5, pc}
 800825a:	bf00      	nop
 800825c:	20005764 	.word	0x20005764

08008260 <__malloc_lock>:
 8008260:	4801      	ldr	r0, [pc, #4]	@ (8008268 <__malloc_lock+0x8>)
 8008262:	f7ff bfa3 	b.w	80081ac <__retarget_lock_acquire_recursive>
 8008266:	bf00      	nop
 8008268:	20005760 	.word	0x20005760

0800826c <__malloc_unlock>:
 800826c:	4801      	ldr	r0, [pc, #4]	@ (8008274 <__malloc_unlock+0x8>)
 800826e:	f7ff bf9e 	b.w	80081ae <__retarget_lock_release_recursive>
 8008272:	bf00      	nop
 8008274:	20005760 	.word	0x20005760

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
